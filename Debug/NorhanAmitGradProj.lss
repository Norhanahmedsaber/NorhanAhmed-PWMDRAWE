
NorhanAmitGradProj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00800060  00002c42  00002cd6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  0080017a  0080017a  00002df0  2**0
                  ALLOC
  3 .stab         000021e4  00000000  00000000  00002df0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001086  00000000  00000000  00004fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000605a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000621a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000642e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00008a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00009f0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000b21c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000b3fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000b703  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c11d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f1 08 	jmp	0x11e2	; 0x11e2 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 33 08 	jmp	0x1066	; 0x1066 <__vector_10>
      2c:	0c 94 66 08 	jmp	0x10cc	; 0x10cc <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e4       	ldi	r30, 0x42	; 66
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 39       	cpi	r26, 0x95	; 149
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 14 15 	call	0x2a28	; 0x2a28 <main>
      8a:	0c 94 1f 16 	jmp	0x2c3e	; 0x2c3e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e8 15 	jmp	0x2bd0	; 0x2bd0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e7       	ldi	r26, 0x72	; 114
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 04 16 	jmp	0x2c08	; 0x2c08 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f4 15 	jmp	0x2be8	; 0x2be8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 10 16 	jmp	0x2c20	; 0x2c20 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f4 15 	jmp	0x2be8	; 0x2be8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 10 16 	jmp	0x2c20	; 0x2c20 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e8 15 	jmp	0x2bd0	; 0x2bd0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e7       	ldi	r24, 0x72	; 114
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 04 16 	jmp	0x2c08	; 0x2c08 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f0 15 	jmp	0x2be0	; 0x2be0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 e7       	ldi	r22, 0x72	; 114
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f4 15 	jmp	0x2be8	; 0x2be8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 10 16 	jmp	0x2c20	; 0x2c20 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f4 15 	jmp	0x2be8	; 0x2be8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 10 16 	jmp	0x2c20	; 0x2c20 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f4 15 	jmp	0x2be8	; 0x2be8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 10 16 	jmp	0x2c20	; 0x2c20 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f1 15 	jmp	0x2be2	; 0x2be2 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 0d 16 	jmp	0x2c1a	; 0x2c1a <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 f8 15 	jmp	0x2bf0	; 0x2bf0 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 14 16 	jmp	0x2c28	; 0x2c28 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 f0 15 	jmp	0x2be0	; 0x2be0 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e6 58       	subi	r30, 0x86	; 134
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <MTIMER0_Init>:
 * 3-Set Interrupt State
 * 4-Set Prescalar
 */

void MTIMER0_Init()
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,1);
#endif

	//============================FAST PWM MODE
#elif TIMER0_MODE==TIMER_FAST_PWM_MODE
	SET_BIT(TCCR0,3);
     ef2:	a3 e5       	ldi	r26, 0x53	; 83
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e3 e5       	ldi	r30, 0x53	; 83
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	88 60       	ori	r24, 0x08	; 8
     efe:	8c 93       	st	X, r24
	SET_BIT(TCCR0,6);
     f00:	a3 e5       	ldi	r26, 0x53	; 83
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e3 e5       	ldi	r30, 0x53	; 83
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	80 64       	ori	r24, 0x40	; 64
     f0c:	8c 93       	st	X, r24
		//Set PWM Wave on OC0
	#if TIMER0_FAST_PWM_WAVE_MODE==FAST_PWM_OC0_DISCONNECTED
		CLR_BIT(TCCR0,4);
		CLR_BIT(TCCR0,5);
	#elif TIMER0_FAST_PWM_WAVE_MODE==FAST_PWM_OC0_NON_INVERTING
		CLR_BIT(TCCR0,4);
     f0e:	a3 e5       	ldi	r26, 0x53	; 83
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e3 e5       	ldi	r30, 0x53	; 83
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8f 7e       	andi	r24, 0xEF	; 239
     f1a:	8c 93       	st	X, r24
		SET_BIT(TCCR0,5);
     f1c:	a3 e5       	ldi	r26, 0x53	; 83
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e3 e5       	ldi	r30, 0x53	; 83
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	80 62       	ori	r24, 0x20	; 32
     f28:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,0);
	SET_BIT(TCCR0,1);
	CLR_BIT(TCCR0,2);
#define PRSCALAR_VALUE PRESCALAR_VALUE_8
#elif TIMER0_CLOCK_SOURCE==PRESCALAR_OVER_64
	SET_BIT(TCCR0,0);
     f2a:	a3 e5       	ldi	r26, 0x53	; 83
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e3 e5       	ldi	r30, 0x53	; 83
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	81 60       	ori	r24, 0x01	; 1
     f36:	8c 93       	st	X, r24
	SET_BIT(TCCR0,1);
     f38:	a3 e5       	ldi	r26, 0x53	; 83
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e3 e5       	ldi	r30, 0x53	; 83
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	82 60       	ori	r24, 0x02	; 2
     f44:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,2);
     f46:	a3 e5       	ldi	r26, 0x53	; 83
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e3 e5       	ldi	r30, 0x53	; 83
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	8b 7f       	andi	r24, 0xFB	; 251
     f52:	8c 93       	st	X, r24
	SET_BIT(TCCR0,0);
	SET_BIT(TCCR0,1);
	SET_BIT(TCCR0,2);
#endif

}
     f54:	cf 91       	pop	r28
     f56:	df 91       	pop	r29
     f58:	08 95       	ret

00000f5a <MTIMER0_SetPreload>:

void MTIMER0_SetPreload(u8 Copy_u8Preload)
{
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	0f 92       	push	r0
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	89 83       	std	Y+1, r24	; 0x01
	TCCR0=Copy_u8Preload;
     f66:	e3 e5       	ldi	r30, 0x53	; 83
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	80 83       	st	Z, r24

}
     f6e:	0f 90       	pop	r0
     f70:	cf 91       	pop	r28
     f72:	df 91       	pop	r29
     f74:	08 95       	ret

00000f76 <MTIMER0_SetCTC>:

void MTIMER0_SetCTC(u8 Copy_u8OCR)
{
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	0f 92       	push	r0
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
     f80:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_u8OCR;
     f82:	ec e5       	ldi	r30, 0x5C	; 92
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	80 83       	st	Z, r24
}
     f8a:	0f 90       	pop	r0
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	08 95       	ret

00000f92 <MTIMER0_OVERFLOW_CALLBACK>:


void MTIMER0_OVERFLOW_CALLBACK(void(*Ptr_OverflowApp)(void))
{
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	00 d0       	rcall	.+0      	; 0xf98 <MTIMER0_OVERFLOW_CALLBACK+0x6>
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
     f9c:	9a 83       	std	Y+2, r25	; 0x02
     f9e:	89 83       	std	Y+1, r24	; 0x01
	if(Ptr_OverflowApp!=NULL)
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	9a 81       	ldd	r25, Y+2	; 0x02
     fa4:	00 97       	sbiw	r24, 0x00	; 0
     fa6:	61 f0       	breq	.+24     	; 0xfc0 <MTIMER0_OVERFLOW_CALLBACK+0x2e>
	{
		if(Glob_OverflowISR_Ptr==NULL)
     fa8:	80 91 7a 01 	lds	r24, 0x017A
     fac:	90 91 7b 01 	lds	r25, 0x017B
     fb0:	00 97       	sbiw	r24, 0x00	; 0
     fb2:	31 f4       	brne	.+12     	; 0xfc0 <MTIMER0_OVERFLOW_CALLBACK+0x2e>
		{
			Glob_OverflowISR_Ptr=Ptr_OverflowApp;
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	9a 81       	ldd	r25, Y+2	; 0x02
     fb8:	90 93 7b 01 	sts	0x017B, r25
     fbc:	80 93 7a 01 	sts	0x017A, r24
		}
	}
}
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	cf 91       	pop	r28
     fc6:	df 91       	pop	r29
     fc8:	08 95       	ret

00000fca <MTIMER0_CTC_CALLBACK>:


void MTIMER0_CTC_CALLBACK(void(*Ptr_CTCApp)(void))
{
     fca:	df 93       	push	r29
     fcc:	cf 93       	push	r28
     fce:	00 d0       	rcall	.+0      	; 0xfd0 <MTIMER0_CTC_CALLBACK+0x6>
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
     fd4:	9a 83       	std	Y+2, r25	; 0x02
     fd6:	89 83       	std	Y+1, r24	; 0x01
	if(Ptr_CTCApp !=NULL)
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	9a 81       	ldd	r25, Y+2	; 0x02
     fdc:	00 97       	sbiw	r24, 0x00	; 0
     fde:	61 f0       	breq	.+24     	; 0xff8 <MTIMER0_CTC_CALLBACK+0x2e>
	{
		if(Glob_CTC_ISR_Ptr==NULL)
     fe0:	80 91 7c 01 	lds	r24, 0x017C
     fe4:	90 91 7d 01 	lds	r25, 0x017D
     fe8:	00 97       	sbiw	r24, 0x00	; 0
     fea:	31 f4       	brne	.+12     	; 0xff8 <MTIMER0_CTC_CALLBACK+0x2e>
		{
			Glob_CTC_ISR_Ptr=Ptr_CTCApp;
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	9a 81       	ldd	r25, Y+2	; 0x02
     ff0:	90 93 7d 01 	sts	0x017D, r25
     ff4:	80 93 7c 01 	sts	0x017C, r24
		}
	}
}
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	cf 91       	pop	r28
     ffe:	df 91       	pop	r29
    1000:	08 95       	ret

00001002 <MTIOMER0_DUTY_CYCLE>:
void MTIOMER0_DUTY_CYCLE(u8  Copyu8_DutyCycle)
{ u8 CTC_Val;
    1002:	df 93       	push	r29
    1004:	cf 93       	push	r28
    1006:	00 d0       	rcall	.+0      	; 0x1008 <MTIOMER0_DUTY_CYCLE+0x6>
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	8a 83       	std	Y+2, r24	; 0x02
	if ((Copyu8_DutyCycle>=0)&&(Copyu8_DutyCycle<=100))
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	85 36       	cpi	r24, 0x65	; 101
    1012:	00 f5       	brcc	.+64     	; 0x1054 <MTIOMER0_DUTY_CYCLE+0x52>

		CTC_Val=(u32)(Copyu8_DutyCycle*255)/100; //ka2eny 3amalt cast
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	48 2f       	mov	r20, r24
    1018:	50 e0       	ldi	r21, 0x00	; 0
    101a:	ca 01       	movw	r24, r20
    101c:	9c 01       	movw	r18, r24
    101e:	22 0f       	add	r18, r18
    1020:	33 1f       	adc	r19, r19
    1022:	c9 01       	movw	r24, r18
    1024:	96 95       	lsr	r25
    1026:	98 2f       	mov	r25, r24
    1028:	88 27       	eor	r24, r24
    102a:	97 95       	ror	r25
    102c:	87 95       	ror	r24
    102e:	82 1b       	sub	r24, r18
    1030:	93 0b       	sbc	r25, r19
    1032:	84 0f       	add	r24, r20
    1034:	95 1f       	adc	r25, r21
    1036:	aa 27       	eor	r26, r26
    1038:	97 fd       	sbrc	r25, 7
    103a:	a0 95       	com	r26
    103c:	ba 2f       	mov	r27, r26
    103e:	24 e6       	ldi	r18, 0x64	; 100
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	40 e0       	ldi	r20, 0x00	; 0
    1044:	50 e0       	ldi	r21, 0x00	; 0
    1046:	bc 01       	movw	r22, r24
    1048:	cd 01       	movw	r24, r26
    104a:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <__udivmodsi4>
    104e:	da 01       	movw	r26, r20
    1050:	c9 01       	movw	r24, r18
    1052:	89 83       	std	Y+1, r24	; 0x01
	OCR0=CTC_Val;
    1054:	ec e5       	ldi	r30, 0x5C	; 92
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	80 83       	st	Z, r24

	}
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	cf 91       	pop	r28
    1062:	df 91       	pop	r29
    1064:	08 95       	ret

00001066 <__vector_10>:


//CTC ISR
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    1066:	1f 92       	push	r1
    1068:	0f 92       	push	r0
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	0f 92       	push	r0
    106e:	11 24       	eor	r1, r1
    1070:	2f 93       	push	r18
    1072:	3f 93       	push	r19
    1074:	4f 93       	push	r20
    1076:	5f 93       	push	r21
    1078:	6f 93       	push	r22
    107a:	7f 93       	push	r23
    107c:	8f 93       	push	r24
    107e:	9f 93       	push	r25
    1080:	af 93       	push	r26
    1082:	bf 93       	push	r27
    1084:	ef 93       	push	r30
    1086:	ff 93       	push	r31
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
	if(Glob_CTC_ISR_Ptr!=NULL)
    1090:	80 91 7c 01 	lds	r24, 0x017C
    1094:	90 91 7d 01 	lds	r25, 0x017D
    1098:	00 97       	sbiw	r24, 0x00	; 0
    109a:	29 f0       	breq	.+10     	; 0x10a6 <__vector_10+0x40>
	{
		Glob_CTC_ISR_Ptr();
    109c:	e0 91 7c 01 	lds	r30, 0x017C
    10a0:	f0 91 7d 01 	lds	r31, 0x017D
    10a4:	09 95       	icall
	}
}
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	ff 91       	pop	r31
    10ac:	ef 91       	pop	r30
    10ae:	bf 91       	pop	r27
    10b0:	af 91       	pop	r26
    10b2:	9f 91       	pop	r25
    10b4:	8f 91       	pop	r24
    10b6:	7f 91       	pop	r23
    10b8:	6f 91       	pop	r22
    10ba:	5f 91       	pop	r21
    10bc:	4f 91       	pop	r20
    10be:	3f 91       	pop	r19
    10c0:	2f 91       	pop	r18
    10c2:	0f 90       	pop	r0
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	0f 90       	pop	r0
    10c8:	1f 90       	pop	r1
    10ca:	18 95       	reti

000010cc <__vector_11>:

//Overflow ISR
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    10cc:	1f 92       	push	r1
    10ce:	0f 92       	push	r0
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	0f 92       	push	r0
    10d4:	11 24       	eor	r1, r1
    10d6:	2f 93       	push	r18
    10d8:	3f 93       	push	r19
    10da:	4f 93       	push	r20
    10dc:	5f 93       	push	r21
    10de:	6f 93       	push	r22
    10e0:	7f 93       	push	r23
    10e2:	8f 93       	push	r24
    10e4:	9f 93       	push	r25
    10e6:	af 93       	push	r26
    10e8:	bf 93       	push	r27
    10ea:	ef 93       	push	r30
    10ec:	ff 93       	push	r31
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
	if(Glob_OverflowISR_Ptr!=NULL)
    10f6:	80 91 7a 01 	lds	r24, 0x017A
    10fa:	90 91 7b 01 	lds	r25, 0x017B
    10fe:	00 97       	sbiw	r24, 0x00	; 0
    1100:	29 f0       	breq	.+10     	; 0x110c <__vector_11+0x40>
	{
		Glob_OverflowISR_Ptr();
    1102:	e0 91 7a 01 	lds	r30, 0x017A
    1106:	f0 91 7b 01 	lds	r31, 0x017B
    110a:	09 95       	icall
	}
}
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	ff 91       	pop	r31
    1112:	ef 91       	pop	r30
    1114:	bf 91       	pop	r27
    1116:	af 91       	pop	r26
    1118:	9f 91       	pop	r25
    111a:	8f 91       	pop	r24
    111c:	7f 91       	pop	r23
    111e:	6f 91       	pop	r22
    1120:	5f 91       	pop	r21
    1122:	4f 91       	pop	r20
    1124:	3f 91       	pop	r19
    1126:	2f 91       	pop	r18
    1128:	0f 90       	pop	r0
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	0f 90       	pop	r0
    112e:	1f 90       	pop	r1
    1130:	18 95       	reti

00001132 <MGIE_Enable>:
#include"../../LIB/BIT_MATH.h"
#include"MGIE_Private.h"

/*Functions Prototypes*/
void MGIE_Enable(void)
{
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    113a:	af e5       	ldi	r26, 0x5F	; 95
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	ef e5       	ldi	r30, 0x5F	; 95
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	80 68       	ori	r24, 0x80	; 128
    1146:	8c 93       	st	X, r24
}
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <MGIE_Disable>:

void MGIE_Disable(void)
{
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    1156:	af e5       	ldi	r26, 0x5F	; 95
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	ef e5       	ldi	r30, 0x5F	; 95
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	8f 77       	andi	r24, 0x7F	; 127
    1162:	8c 93       	st	X, r24
}
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	08 95       	ret

0000116a <MEXTI0_Init>:
#include"../../LIB/BIT_MATH.h"
#include"MEXTI_Config.h"


void MEXTI0_Init()
{
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
#if MEXTI_SENSE_CONTROL_STATE==MEXTI_LOW_LEVEL

	CLR_BIT(MCUCR,0);
	CLR_BIT(MCUCR,1);
#elif MEXTI_SENSE_CONTROL_STATE==MEXTI_ANY_LOGICAL_CHANGE
	SET_BIT(MCUCR,0);
    1172:	a5 e5       	ldi	r26, 0x55	; 85
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e5 e5       	ldi	r30, 0x55	; 85
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	81 60       	ori	r24, 0x01	; 1
    117e:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,1);
    1180:	a5 e5       	ldi	r26, 0x55	; 85
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e5 e5       	ldi	r30, 0x55	; 85
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	8d 7f       	andi	r24, 0xFD	; 253
    118c:	8c 93       	st	X, r24
	SET_BIT(MCUCR,0);
	SET_BIT(MCUCR,1);
#endif

	/*Enable Interrupt on INT0 ==> PIE of Interrupt zero*/
	SET_BIT(GICR,6);
    118e:	ab e5       	ldi	r26, 0x5B	; 91
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	eb e5       	ldi	r30, 0x5B	; 91
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	80 64       	ori	r24, 0x40	; 64
    119a:	8c 93       	st	X, r24
}
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <MEXTI1_Init>:

void MEXTI1_Init()
{
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62

}
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <MEXTI2_Init>:

void MEXTI2_Init()
{
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62

}
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <INTERRUPT_Set0CallBack>:
void(*INTERRUPT_CallBack)(void); //pointer to function
void INTERRUPT_Set0CallBack(void(*copy_ptr)(void))
{
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	00 d0       	rcall	.+0      	; 0x11c4 <INTERRUPT_Set0CallBack+0x6>
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	9a 83       	std	Y+2, r25	; 0x02
    11ca:	89 83       	std	Y+1, r24	; 0x01
	INTERRUPT_CallBack=copy_ptr;
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	9a 81       	ldd	r25, Y+2	; 0x02
    11d0:	90 93 94 01 	sts	0x0194, r25
    11d4:	80 93 93 01 	sts	0x0193, r24
}
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	cf 91       	pop	r28
    11de:	df 91       	pop	r29
    11e0:	08 95       	ret

000011e2 <__vector_1>:


//call back function
void __vector_1(void)__attribute((signal));
void __vector_1(void)
{
    11e2:	1f 92       	push	r1
    11e4:	0f 92       	push	r0
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	0f 92       	push	r0
    11ea:	11 24       	eor	r1, r1
    11ec:	2f 93       	push	r18
    11ee:	3f 93       	push	r19
    11f0:	4f 93       	push	r20
    11f2:	5f 93       	push	r21
    11f4:	6f 93       	push	r22
    11f6:	7f 93       	push	r23
    11f8:	8f 93       	push	r24
    11fa:	9f 93       	push	r25
    11fc:	af 93       	push	r26
    11fe:	bf 93       	push	r27
    1200:	ef 93       	push	r30
    1202:	ff 93       	push	r31
    1204:	df 93       	push	r29
    1206:	cf 93       	push	r28
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
	INTERRUPT_CallBack();
    120c:	e0 91 93 01 	lds	r30, 0x0193
    1210:	f0 91 94 01 	lds	r31, 0x0194
    1214:	09 95       	icall
}
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	ff 91       	pop	r31
    121c:	ef 91       	pop	r30
    121e:	bf 91       	pop	r27
    1220:	af 91       	pop	r26
    1222:	9f 91       	pop	r25
    1224:	8f 91       	pop	r24
    1226:	7f 91       	pop	r23
    1228:	6f 91       	pop	r22
    122a:	5f 91       	pop	r21
    122c:	4f 91       	pop	r20
    122e:	3f 91       	pop	r19
    1230:	2f 91       	pop	r18
    1232:	0f 90       	pop	r0
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	0f 90       	pop	r0
    1238:	1f 90       	pop	r1
    123a:	18 95       	reti

0000123c <MDIO_SetPortDirection>:
#include "MDIO_Private.h"
#include "../../LIB/STD_TYPES.h"
#include "../../LIB/BIT_MATH.h"

void MDIO_SetPortDirection(u8 Copy_u8PortNumber ,u8 Copy_u8PortDirection)
{
    123c:	df 93       	push	r29
    123e:	cf 93       	push	r28
    1240:	00 d0       	rcall	.+0      	; 0x1242 <MDIO_SetPortDirection+0x6>
    1242:	00 d0       	rcall	.+0      	; 0x1244 <MDIO_SetPortDirection+0x8>
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	89 83       	std	Y+1, r24	; 0x01
    124a:	6a 83       	std	Y+2, r22	; 0x02
	if ((Copy_u8PortDirection==PortOutput||Copy_u8PortDirection==PortInput))
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	8f 3f       	cpi	r24, 0xFF	; 255
    1250:	19 f0       	breq	.+6      	; 0x1258 <MDIO_SetPortDirection+0x1c>
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	88 23       	and	r24, r24
    1256:	91 f5       	brne	.+100    	; 0x12bc <MDIO_SetPortDirection+0x80>
	{
		//Handling values
		switch (Copy_u8PortNumber)
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	3c 83       	std	Y+4, r19	; 0x04
    1260:	2b 83       	std	Y+3, r18	; 0x03
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	9c 81       	ldd	r25, Y+4	; 0x04
    1266:	81 30       	cpi	r24, 0x01	; 1
    1268:	91 05       	cpc	r25, r1
    126a:	d1 f0       	breq	.+52     	; 0x12a0 <MDIO_SetPortDirection+0x64>
    126c:	2b 81       	ldd	r18, Y+3	; 0x03
    126e:	3c 81       	ldd	r19, Y+4	; 0x04
    1270:	22 30       	cpi	r18, 0x02	; 2
    1272:	31 05       	cpc	r19, r1
    1274:	2c f4       	brge	.+10     	; 0x1280 <MDIO_SetPortDirection+0x44>
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	9c 81       	ldd	r25, Y+4	; 0x04
    127a:	00 97       	sbiw	r24, 0x00	; 0
    127c:	61 f0       	breq	.+24     	; 0x1296 <MDIO_SetPortDirection+0x5a>
    127e:	1e c0       	rjmp	.+60     	; 0x12bc <MDIO_SetPortDirection+0x80>
    1280:	2b 81       	ldd	r18, Y+3	; 0x03
    1282:	3c 81       	ldd	r19, Y+4	; 0x04
    1284:	22 30       	cpi	r18, 0x02	; 2
    1286:	31 05       	cpc	r19, r1
    1288:	81 f0       	breq	.+32     	; 0x12aa <MDIO_SetPortDirection+0x6e>
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	9c 81       	ldd	r25, Y+4	; 0x04
    128e:	83 30       	cpi	r24, 0x03	; 3
    1290:	91 05       	cpc	r25, r1
    1292:	81 f0       	breq	.+32     	; 0x12b4 <MDIO_SetPortDirection+0x78>
    1294:	13 c0       	rjmp	.+38     	; 0x12bc <MDIO_SetPortDirection+0x80>
		{ case MDIO_PORTA:
			DDRA=Copy_u8PortDirection;
    1296:	ea e3       	ldi	r30, 0x3A	; 58
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	80 83       	st	Z, r24
    129e:	0e c0       	rjmp	.+28     	; 0x12bc <MDIO_SetPortDirection+0x80>
			break;
		case MDIO_PORTB:
					DDRB=Copy_u8PortDirection;
    12a0:	e7 e3       	ldi	r30, 0x37	; 55
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	80 83       	st	Z, r24
    12a8:	09 c0       	rjmp	.+18     	; 0x12bc <MDIO_SetPortDirection+0x80>
					break;
		case MDIO_PORTC:
					DDRC=Copy_u8PortDirection;
    12aa:	e4 e3       	ldi	r30, 0x34	; 52
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	80 83       	st	Z, r24
    12b2:	04 c0       	rjmp	.+8      	; 0x12bc <MDIO_SetPortDirection+0x80>
					break;
		case MDIO_PORTD:
					DDRD=Copy_u8PortDirection;
    12b4:	e1 e3       	ldi	r30, 0x31	; 49
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	80 83       	st	Z, r24
	else
	{
		/*Invalid PortNumber*/
	}

}
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	0f 90       	pop	r0
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <MDIO_SetPortValue>:
void MDIO_SetPortValue(u8 Copy_u8PortNumber,u8 Copy_u8PortValue)
{
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	00 d0       	rcall	.+0      	; 0x12d0 <MDIO_SetPortValue+0x6>
    12d0:	00 d0       	rcall	.+0      	; 0x12d2 <MDIO_SetPortValue+0x8>
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	89 83       	std	Y+1, r24	; 0x01
    12d8:	6a 83       	std	Y+2, r22	; 0x02
	if ((Copy_u8PortValue==PortHigh||Copy_u8PortValue==PortLOW))
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	8f 3f       	cpi	r24, 0xFF	; 255
    12de:	19 f0       	breq	.+6      	; 0x12e6 <MDIO_SetPortValue+0x1c>
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	88 23       	and	r24, r24
    12e4:	91 f5       	brne	.+100    	; 0x134a <MDIO_SetPortValue+0x80>
		{
			//Handling values
			switch (Copy_u8PortNumber)
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	3c 83       	std	Y+4, r19	; 0x04
    12ee:	2b 83       	std	Y+3, r18	; 0x03
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	9c 81       	ldd	r25, Y+4	; 0x04
    12f4:	81 30       	cpi	r24, 0x01	; 1
    12f6:	91 05       	cpc	r25, r1
    12f8:	d1 f0       	breq	.+52     	; 0x132e <MDIO_SetPortValue+0x64>
    12fa:	2b 81       	ldd	r18, Y+3	; 0x03
    12fc:	3c 81       	ldd	r19, Y+4	; 0x04
    12fe:	22 30       	cpi	r18, 0x02	; 2
    1300:	31 05       	cpc	r19, r1
    1302:	2c f4       	brge	.+10     	; 0x130e <MDIO_SetPortValue+0x44>
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	9c 81       	ldd	r25, Y+4	; 0x04
    1308:	00 97       	sbiw	r24, 0x00	; 0
    130a:	61 f0       	breq	.+24     	; 0x1324 <MDIO_SetPortValue+0x5a>
    130c:	1e c0       	rjmp	.+60     	; 0x134a <MDIO_SetPortValue+0x80>
    130e:	2b 81       	ldd	r18, Y+3	; 0x03
    1310:	3c 81       	ldd	r19, Y+4	; 0x04
    1312:	22 30       	cpi	r18, 0x02	; 2
    1314:	31 05       	cpc	r19, r1
    1316:	81 f0       	breq	.+32     	; 0x1338 <MDIO_SetPortValue+0x6e>
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	9c 81       	ldd	r25, Y+4	; 0x04
    131c:	83 30       	cpi	r24, 0x03	; 3
    131e:	91 05       	cpc	r25, r1
    1320:	81 f0       	breq	.+32     	; 0x1342 <MDIO_SetPortValue+0x78>
    1322:	13 c0       	rjmp	.+38     	; 0x134a <MDIO_SetPortValue+0x80>
			{ case MDIO_PORTA:
				DDRA=Copy_u8PortValue;
    1324:	ea e3       	ldi	r30, 0x3A	; 58
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	80 83       	st	Z, r24
    132c:	0e c0       	rjmp	.+28     	; 0x134a <MDIO_SetPortValue+0x80>
				break;
			case MDIO_PORTB:
						DDRB=Copy_u8PortValue;
    132e:	e7 e3       	ldi	r30, 0x37	; 55
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	80 83       	st	Z, r24
    1336:	09 c0       	rjmp	.+18     	; 0x134a <MDIO_SetPortValue+0x80>
						break;
			case MDIO_PORTC:
						DDRC=Copy_u8PortValue;
    1338:	e4 e3       	ldi	r30, 0x34	; 52
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	80 83       	st	Z, r24
    1340:	04 c0       	rjmp	.+8      	; 0x134a <MDIO_SetPortValue+0x80>
						break;
			case MDIO_PORTD:
						DDRD=Copy_u8PortValue;
    1342:	e1 e3       	ldi	r30, 0x31	; 49
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	80 83       	st	Z, r24
		else
		{
			/*Invalid portValue */
		}

}
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	08 95       	ret

00001358 <MDIO_ReadPin>:

void MDIO_ReadPin(u8 Copy_u8PortNumber ,u8 Copy_u8PinNumber,u8 * p_u8PortReading)
{
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	00 d0       	rcall	.+0      	; 0x135e <MDIO_ReadPin+0x6>
    135e:	00 d0       	rcall	.+0      	; 0x1360 <MDIO_ReadPin+0x8>
    1360:	00 d0       	rcall	.+0      	; 0x1362 <MDIO_ReadPin+0xa>
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	89 83       	std	Y+1, r24	; 0x01
    1368:	6a 83       	std	Y+2, r22	; 0x02
    136a:	5c 83       	std	Y+4, r21	; 0x04
    136c:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_u8PinNumber>=0||Copy_u8PinNumber<8))
	{
		switch(Copy_u8PortNumber){
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	3e 83       	std	Y+6, r19	; 0x06
    1376:	2d 83       	std	Y+5, r18	; 0x05
    1378:	4d 81       	ldd	r20, Y+5	; 0x05
    137a:	5e 81       	ldd	r21, Y+6	; 0x06
    137c:	41 30       	cpi	r20, 0x01	; 1
    137e:	51 05       	cpc	r21, r1
    1380:	59 f1       	breq	.+86     	; 0x13d8 <MDIO_ReadPin+0x80>
    1382:	8d 81       	ldd	r24, Y+5	; 0x05
    1384:	9e 81       	ldd	r25, Y+6	; 0x06
    1386:	82 30       	cpi	r24, 0x02	; 2
    1388:	91 05       	cpc	r25, r1
    138a:	34 f4       	brge	.+12     	; 0x1398 <MDIO_ReadPin+0x40>
    138c:	2d 81       	ldd	r18, Y+5	; 0x05
    138e:	3e 81       	ldd	r19, Y+6	; 0x06
    1390:	21 15       	cp	r18, r1
    1392:	31 05       	cpc	r19, r1
    1394:	69 f0       	breq	.+26     	; 0x13b0 <MDIO_ReadPin+0x58>
    1396:	5b c0       	rjmp	.+182    	; 0x144e <MDIO_ReadPin+0xf6>
    1398:	4d 81       	ldd	r20, Y+5	; 0x05
    139a:	5e 81       	ldd	r21, Y+6	; 0x06
    139c:	42 30       	cpi	r20, 0x02	; 2
    139e:	51 05       	cpc	r21, r1
    13a0:	79 f1       	breq	.+94     	; 0x1400 <MDIO_ReadPin+0xa8>
    13a2:	8d 81       	ldd	r24, Y+5	; 0x05
    13a4:	9e 81       	ldd	r25, Y+6	; 0x06
    13a6:	83 30       	cpi	r24, 0x03	; 3
    13a8:	91 05       	cpc	r25, r1
    13aa:	09 f4       	brne	.+2      	; 0x13ae <MDIO_ReadPin+0x56>
    13ac:	3d c0       	rjmp	.+122    	; 0x1428 <MDIO_ReadPin+0xd0>
    13ae:	4f c0       	rjmp	.+158    	; 0x144e <MDIO_ReadPin+0xf6>
		case MDIO_PORTA:
				 *p_u8PortReading=GET_BIT(PINA,Copy_u8PinNumber);
    13b0:	e9 e3       	ldi	r30, 0x39	; 57
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	88 2f       	mov	r24, r24
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	a9 01       	movw	r20, r18
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <MDIO_ReadPin+0x70>
    13c4:	55 95       	asr	r21
    13c6:	47 95       	ror	r20
    13c8:	8a 95       	dec	r24
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <MDIO_ReadPin+0x6c>
    13cc:	ca 01       	movw	r24, r20
    13ce:	81 70       	andi	r24, 0x01	; 1
    13d0:	eb 81       	ldd	r30, Y+3	; 0x03
    13d2:	fc 81       	ldd	r31, Y+4	; 0x04
    13d4:	80 83       	st	Z, r24
    13d6:	3b c0       	rjmp	.+118    	; 0x144e <MDIO_ReadPin+0xf6>

			break;
		case MDIO_PORTB:
				*p_u8PortReading=GET_BIT(PINA,Copy_u8PinNumber);
    13d8:	e9 e3       	ldi	r30, 0x39	; 57
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	88 2f       	mov	r24, r24
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	a9 01       	movw	r20, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <MDIO_ReadPin+0x98>
    13ec:	55 95       	asr	r21
    13ee:	47 95       	ror	r20
    13f0:	8a 95       	dec	r24
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <MDIO_ReadPin+0x94>
    13f4:	ca 01       	movw	r24, r20
    13f6:	81 70       	andi	r24, 0x01	; 1
    13f8:	eb 81       	ldd	r30, Y+3	; 0x03
    13fa:	fc 81       	ldd	r31, Y+4	; 0x04
    13fc:	80 83       	st	Z, r24
    13fe:	27 c0       	rjmp	.+78     	; 0x144e <MDIO_ReadPin+0xf6>

			break;
		case MDIO_PORTC:
				 *p_u8PortReading=GET_BIT(PINA,Copy_u8PinNumber);
    1400:	e9 e3       	ldi	r30, 0x39	; 57
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	28 2f       	mov	r18, r24
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	88 2f       	mov	r24, r24
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	a9 01       	movw	r20, r18
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <MDIO_ReadPin+0xc0>
    1414:	55 95       	asr	r21
    1416:	47 95       	ror	r20
    1418:	8a 95       	dec	r24
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <MDIO_ReadPin+0xbc>
    141c:	ca 01       	movw	r24, r20
    141e:	81 70       	andi	r24, 0x01	; 1
    1420:	eb 81       	ldd	r30, Y+3	; 0x03
    1422:	fc 81       	ldd	r31, Y+4	; 0x04
    1424:	80 83       	st	Z, r24
    1426:	13 c0       	rjmp	.+38     	; 0x144e <MDIO_ReadPin+0xf6>

			break;
		case MDIO_PORTD:
				*p_u8PortReading=GET_BIT(PINA,Copy_u8PinNumber);
    1428:	e9 e3       	ldi	r30, 0x39	; 57
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	88 2f       	mov	r24, r24
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	a9 01       	movw	r20, r18
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <MDIO_ReadPin+0xe8>
    143c:	55 95       	asr	r21
    143e:	47 95       	ror	r20
    1440:	8a 95       	dec	r24
    1442:	e2 f7       	brpl	.-8      	; 0x143c <MDIO_ReadPin+0xe4>
    1444:	ca 01       	movw	r24, r20
    1446:	81 70       	andi	r24, 0x01	; 1
    1448:	eb 81       	ldd	r30, Y+3	; 0x03
    144a:	fc 81       	ldd	r31, Y+4	; 0x04
    144c:	80 83       	st	Z, r24
	}
	else
	{
		/*Invalid Pin Number*/
	}
}
    144e:	26 96       	adiw	r28, 0x06	; 6
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	cd bf       	out	0x3d, r28	; 61
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	08 95       	ret

00001460 <MDIO_ReadPort>:
void MDIO_ReadPort(u8 Copy_u8PortNumber,u8 * p_u8PortReading)
{
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	00 d0       	rcall	.+0      	; 0x1466 <MDIO_ReadPort+0x6>
    1466:	00 d0       	rcall	.+0      	; 0x1468 <MDIO_ReadPort+0x8>
    1468:	0f 92       	push	r0
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
    146e:	89 83       	std	Y+1, r24	; 0x01
    1470:	7b 83       	std	Y+3, r23	; 0x03
    1472:	6a 83       	std	Y+2, r22	; 0x02
	if(p_u8PortReading!=Null)
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	9b 81       	ldd	r25, Y+3	; 0x03
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	d1 f1       	breq	.+116    	; 0x14f0 <MDIO_ReadPort+0x90>
	{
		switch(Copy_u8PortNumber)
    147c:	89 81       	ldd	r24, Y+1	; 0x01
    147e:	28 2f       	mov	r18, r24
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	3d 83       	std	Y+5, r19	; 0x05
    1484:	2c 83       	std	Y+4, r18	; 0x04
    1486:	8c 81       	ldd	r24, Y+4	; 0x04
    1488:	9d 81       	ldd	r25, Y+5	; 0x05
    148a:	81 30       	cpi	r24, 0x01	; 1
    148c:	91 05       	cpc	r25, r1
    148e:	e1 f0       	breq	.+56     	; 0x14c8 <MDIO_ReadPort+0x68>
    1490:	2c 81       	ldd	r18, Y+4	; 0x04
    1492:	3d 81       	ldd	r19, Y+5	; 0x05
    1494:	22 30       	cpi	r18, 0x02	; 2
    1496:	31 05       	cpc	r19, r1
    1498:	2c f4       	brge	.+10     	; 0x14a4 <MDIO_ReadPort+0x44>
    149a:	8c 81       	ldd	r24, Y+4	; 0x04
    149c:	9d 81       	ldd	r25, Y+5	; 0x05
    149e:	00 97       	sbiw	r24, 0x00	; 0
    14a0:	61 f0       	breq	.+24     	; 0x14ba <MDIO_ReadPort+0x5a>
    14a2:	26 c0       	rjmp	.+76     	; 0x14f0 <MDIO_ReadPort+0x90>
    14a4:	2c 81       	ldd	r18, Y+4	; 0x04
    14a6:	3d 81       	ldd	r19, Y+5	; 0x05
    14a8:	22 30       	cpi	r18, 0x02	; 2
    14aa:	31 05       	cpc	r19, r1
    14ac:	a1 f0       	breq	.+40     	; 0x14d6 <MDIO_ReadPort+0x76>
    14ae:	8c 81       	ldd	r24, Y+4	; 0x04
    14b0:	9d 81       	ldd	r25, Y+5	; 0x05
    14b2:	83 30       	cpi	r24, 0x03	; 3
    14b4:	91 05       	cpc	r25, r1
    14b6:	b1 f0       	breq	.+44     	; 0x14e4 <MDIO_ReadPort+0x84>
    14b8:	1b c0       	rjmp	.+54     	; 0x14f0 <MDIO_ReadPort+0x90>
		{
		case MDIO_PORTA:
			*p_u8PortReading=PINA;
    14ba:	e9 e3       	ldi	r30, 0x39	; 57
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	ea 81       	ldd	r30, Y+2	; 0x02
    14c2:	fb 81       	ldd	r31, Y+3	; 0x03
    14c4:	80 83       	st	Z, r24
    14c6:	14 c0       	rjmp	.+40     	; 0x14f0 <MDIO_ReadPort+0x90>
			break;
		case MDIO_PORTB:
			*p_u8PortReading=PINB;
    14c8:	e6 e3       	ldi	r30, 0x36	; 54
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	ea 81       	ldd	r30, Y+2	; 0x02
    14d0:	fb 81       	ldd	r31, Y+3	; 0x03
    14d2:	80 83       	st	Z, r24
    14d4:	0d c0       	rjmp	.+26     	; 0x14f0 <MDIO_ReadPort+0x90>
			break;
		case MDIO_PORTC:
			*p_u8PortReading=PINC;
    14d6:	e3 e3       	ldi	r30, 0x33	; 51
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	ea 81       	ldd	r30, Y+2	; 0x02
    14de:	fb 81       	ldd	r31, Y+3	; 0x03
    14e0:	80 83       	st	Z, r24
    14e2:	06 c0       	rjmp	.+12     	; 0x14f0 <MDIO_ReadPort+0x90>
			break;
		case MDIO_PORTD:
			*p_u8PortReading=PIND;
    14e4:	e0 e3       	ldi	r30, 0x30	; 48
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	ea 81       	ldd	r30, Y+2	; 0x02
    14ec:	fb 81       	ldd	r31, Y+3	; 0x03
    14ee:	80 83       	st	Z, r24
	}
	else
	{
		/*Invalid Port Number*/
	}
}
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	cf 91       	pop	r28
    14fc:	df 91       	pop	r29
    14fe:	08 95       	ret

00001500 <MDIO_SetPinDirection>:
void MDIO_SetPinDirection(u8 Copy_u8PortNumber ,u8 Copy_u8PinDirection,u8 Copy_u8PinNumber)
{
    1500:	df 93       	push	r29
    1502:	cf 93       	push	r28
    1504:	00 d0       	rcall	.+0      	; 0x1506 <MDIO_SetPinDirection+0x6>
    1506:	00 d0       	rcall	.+0      	; 0x1508 <MDIO_SetPinDirection+0x8>
    1508:	0f 92       	push	r0
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	89 83       	std	Y+1, r24	; 0x01
    1510:	6a 83       	std	Y+2, r22	; 0x02
    1512:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_u8PinNumber>=0||Copy_u8PinNumber<8))
			{
				switch(Copy_u8PortNumber)
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	3d 83       	std	Y+5, r19	; 0x05
    151c:	2c 83       	std	Y+4, r18	; 0x04
    151e:	8c 81       	ldd	r24, Y+4	; 0x04
    1520:	9d 81       	ldd	r25, Y+5	; 0x05
    1522:	81 30       	cpi	r24, 0x01	; 1
    1524:	91 05       	cpc	r25, r1
    1526:	09 f4       	brne	.+2      	; 0x152a <MDIO_SetPinDirection+0x2a>
    1528:	47 c0       	rjmp	.+142    	; 0x15b8 <MDIO_SetPinDirection+0xb8>
    152a:	2c 81       	ldd	r18, Y+4	; 0x04
    152c:	3d 81       	ldd	r19, Y+5	; 0x05
    152e:	22 30       	cpi	r18, 0x02	; 2
    1530:	31 05       	cpc	r19, r1
    1532:	2c f4       	brge	.+10     	; 0x153e <MDIO_SetPinDirection+0x3e>
    1534:	8c 81       	ldd	r24, Y+4	; 0x04
    1536:	9d 81       	ldd	r25, Y+5	; 0x05
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	71 f0       	breq	.+28     	; 0x1558 <MDIO_SetPinDirection+0x58>
    153c:	cb c0       	rjmp	.+406    	; 0x16d4 <MDIO_SetPinDirection+0x1d4>
    153e:	2c 81       	ldd	r18, Y+4	; 0x04
    1540:	3d 81       	ldd	r19, Y+5	; 0x05
    1542:	22 30       	cpi	r18, 0x02	; 2
    1544:	31 05       	cpc	r19, r1
    1546:	09 f4       	brne	.+2      	; 0x154a <MDIO_SetPinDirection+0x4a>
    1548:	67 c0       	rjmp	.+206    	; 0x1618 <MDIO_SetPinDirection+0x118>
    154a:	8c 81       	ldd	r24, Y+4	; 0x04
    154c:	9d 81       	ldd	r25, Y+5	; 0x05
    154e:	83 30       	cpi	r24, 0x03	; 3
    1550:	91 05       	cpc	r25, r1
    1552:	09 f4       	brne	.+2      	; 0x1556 <MDIO_SetPinDirection+0x56>
    1554:	91 c0       	rjmp	.+290    	; 0x1678 <MDIO_SetPinDirection+0x178>
    1556:	be c0       	rjmp	.+380    	; 0x16d4 <MDIO_SetPinDirection+0x1d4>
				{
					case MDIO_PORTA:
						if(Copy_u8PinDirection==PinOutput)
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	81 30       	cpi	r24, 0x01	; 1
    155c:	a1 f4       	brne	.+40     	; 0x1586 <MDIO_SetPinDirection+0x86>
						{
							SET_BIT(DDRA,Copy_u8PinNumber);
    155e:	aa e3       	ldi	r26, 0x3A	; 58
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	ea e3       	ldi	r30, 0x3A	; 58
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	48 2f       	mov	r20, r24
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	02 2e       	mov	r0, r18
    1576:	02 c0       	rjmp	.+4      	; 0x157c <MDIO_SetPinDirection+0x7c>
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	0a 94       	dec	r0
    157e:	e2 f7       	brpl	.-8      	; 0x1578 <MDIO_SetPinDirection+0x78>
    1580:	84 2b       	or	r24, r20
    1582:	8c 93       	st	X, r24
    1584:	a7 c0       	rjmp	.+334    	; 0x16d4 <MDIO_SetPinDirection+0x1d4>
						}
						else if(Copy_u8PinDirection==PinInput)
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	88 23       	and	r24, r24
    158a:	09 f0       	breq	.+2      	; 0x158e <MDIO_SetPinDirection+0x8e>
    158c:	a3 c0       	rjmp	.+326    	; 0x16d4 <MDIO_SetPinDirection+0x1d4>
						{
							CLR_BIT(DDRA,Copy_u8PinNumber);
    158e:	aa e3       	ldi	r26, 0x3A	; 58
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	ea e3       	ldi	r30, 0x3A	; 58
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	48 2f       	mov	r20, r24
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	02 2e       	mov	r0, r18
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <MDIO_SetPinDirection+0xac>
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	0a 94       	dec	r0
    15ae:	e2 f7       	brpl	.-8      	; 0x15a8 <MDIO_SetPinDirection+0xa8>
    15b0:	80 95       	com	r24
    15b2:	84 23       	and	r24, r20
    15b4:	8c 93       	st	X, r24
    15b6:	8e c0       	rjmp	.+284    	; 0x16d4 <MDIO_SetPinDirection+0x1d4>
						{
										//Invalid Pin Direction
						}
					break;
					case MDIO_PORTB:
						if(Copy_u8PinDirection==PinOutput)
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	81 30       	cpi	r24, 0x01	; 1
    15bc:	a1 f4       	brne	.+40     	; 0x15e6 <MDIO_SetPinDirection+0xe6>
						{
							SET_BIT(DDRB,Copy_u8PinNumber);
    15be:	a7 e3       	ldi	r26, 0x37	; 55
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e7 e3       	ldi	r30, 0x37	; 55
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	48 2f       	mov	r20, r24
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	28 2f       	mov	r18, r24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	02 2e       	mov	r0, r18
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <MDIO_SetPinDirection+0xdc>
    15d8:	88 0f       	add	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	0a 94       	dec	r0
    15de:	e2 f7       	brpl	.-8      	; 0x15d8 <MDIO_SetPinDirection+0xd8>
    15e0:	84 2b       	or	r24, r20
    15e2:	8c 93       	st	X, r24
    15e4:	77 c0       	rjmp	.+238    	; 0x16d4 <MDIO_SetPinDirection+0x1d4>
						}
						else if(Copy_u8PinDirection==PinInput)
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	88 23       	and	r24, r24
    15ea:	09 f0       	breq	.+2      	; 0x15ee <MDIO_SetPinDirection+0xee>
    15ec:	73 c0       	rjmp	.+230    	; 0x16d4 <MDIO_SetPinDirection+0x1d4>
						{
							CLR_BIT(DDRB,Copy_u8PinNumber);
    15ee:	a7 e3       	ldi	r26, 0x37	; 55
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	e7 e3       	ldi	r30, 0x37	; 55
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	48 2f       	mov	r20, r24
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	02 2e       	mov	r0, r18
    1606:	02 c0       	rjmp	.+4      	; 0x160c <MDIO_SetPinDirection+0x10c>
    1608:	88 0f       	add	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	0a 94       	dec	r0
    160e:	e2 f7       	brpl	.-8      	; 0x1608 <MDIO_SetPinDirection+0x108>
    1610:	80 95       	com	r24
    1612:	84 23       	and	r24, r20
    1614:	8c 93       	st	X, r24
    1616:	5e c0       	rjmp	.+188    	; 0x16d4 <MDIO_SetPinDirection+0x1d4>
						{
										//Invalid Pin Direction
						}
					break;
					case MDIO_PORTC:
						if(Copy_u8PinDirection==PinOutput)
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	81 30       	cpi	r24, 0x01	; 1
    161c:	a1 f4       	brne	.+40     	; 0x1646 <MDIO_SetPinDirection+0x146>
						{
							SET_BIT(DDRC,Copy_u8PinNumber);
    161e:	a4 e3       	ldi	r26, 0x34	; 52
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e4 e3       	ldi	r30, 0x34	; 52
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	48 2f       	mov	r20, r24
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	02 2e       	mov	r0, r18
    1636:	02 c0       	rjmp	.+4      	; 0x163c <MDIO_SetPinDirection+0x13c>
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	0a 94       	dec	r0
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <MDIO_SetPinDirection+0x138>
    1640:	84 2b       	or	r24, r20
    1642:	8c 93       	st	X, r24
    1644:	47 c0       	rjmp	.+142    	; 0x16d4 <MDIO_SetPinDirection+0x1d4>
						}
						else if(Copy_u8PinDirection==PinInput)
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	88 23       	and	r24, r24
    164a:	09 f0       	breq	.+2      	; 0x164e <MDIO_SetPinDirection+0x14e>
    164c:	43 c0       	rjmp	.+134    	; 0x16d4 <MDIO_SetPinDirection+0x1d4>
						{
							CLR_BIT(DDRC,Copy_u8PinNumber);
    164e:	a4 e3       	ldi	r26, 0x34	; 52
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e4 e3       	ldi	r30, 0x34	; 52
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	48 2f       	mov	r20, r24
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	02 2e       	mov	r0, r18
    1666:	02 c0       	rjmp	.+4      	; 0x166c <MDIO_SetPinDirection+0x16c>
    1668:	88 0f       	add	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	0a 94       	dec	r0
    166e:	e2 f7       	brpl	.-8      	; 0x1668 <MDIO_SetPinDirection+0x168>
    1670:	80 95       	com	r24
    1672:	84 23       	and	r24, r20
    1674:	8c 93       	st	X, r24
    1676:	2e c0       	rjmp	.+92     	; 0x16d4 <MDIO_SetPinDirection+0x1d4>
						{
										//Invalid Pin Direction
						}
					break;
					case MDIO_PORTD:
						if(Copy_u8PinDirection==PinOutput)
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	81 30       	cpi	r24, 0x01	; 1
    167c:	a1 f4       	brne	.+40     	; 0x16a6 <MDIO_SetPinDirection+0x1a6>
						{
							SET_BIT(DDRD,Copy_u8PinNumber);
    167e:	a1 e3       	ldi	r26, 0x31	; 49
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e1 e3       	ldi	r30, 0x31	; 49
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	48 2f       	mov	r20, r24
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	02 2e       	mov	r0, r18
    1696:	02 c0       	rjmp	.+4      	; 0x169c <MDIO_SetPinDirection+0x19c>
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	0a 94       	dec	r0
    169e:	e2 f7       	brpl	.-8      	; 0x1698 <MDIO_SetPinDirection+0x198>
    16a0:	84 2b       	or	r24, r20
    16a2:	8c 93       	st	X, r24
    16a4:	17 c0       	rjmp	.+46     	; 0x16d4 <MDIO_SetPinDirection+0x1d4>
						}
						else if(Copy_u8PinDirection==PinInput)
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	88 23       	and	r24, r24
    16aa:	a1 f4       	brne	.+40     	; 0x16d4 <MDIO_SetPinDirection+0x1d4>
						{
							CLR_BIT(DDRD,Copy_u8PinNumber);
    16ac:	a1 e3       	ldi	r26, 0x31	; 49
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	e1 e3       	ldi	r30, 0x31	; 49
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	48 2f       	mov	r20, r24
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ba:	28 2f       	mov	r18, r24
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	02 2e       	mov	r0, r18
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <MDIO_SetPinDirection+0x1ca>
    16c6:	88 0f       	add	r24, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	0a 94       	dec	r0
    16cc:	e2 f7       	brpl	.-8      	; 0x16c6 <MDIO_SetPinDirection+0x1c6>
    16ce:	80 95       	com	r24
    16d0:	84 23       	and	r24, r20
    16d2:	8c 93       	st	X, r24
			}
	else
		{
		/*Invalid Pin Value */
		}
}
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	cf 91       	pop	r28
    16e0:	df 91       	pop	r29
    16e2:	08 95       	ret

000016e4 <MDIO_SetPinValue>:
void MDIO_SetPinValue(u8 Copy_u8PortNumber,u8 Copy_u8PinNumber,u8 Copy_u8PinValue)
{
    16e4:	df 93       	push	r29
    16e6:	cf 93       	push	r28
    16e8:	00 d0       	rcall	.+0      	; 0x16ea <MDIO_SetPinValue+0x6>
    16ea:	00 d0       	rcall	.+0      	; 0x16ec <MDIO_SetPinValue+0x8>
    16ec:	0f 92       	push	r0
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
    16f2:	89 83       	std	Y+1, r24	; 0x01
    16f4:	6a 83       	std	Y+2, r22	; 0x02
    16f6:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_u8PinNumber>=0&&Copy_u8PinNumber<8))
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	88 30       	cpi	r24, 0x08	; 8
    16fc:	08 f0       	brcs	.+2      	; 0x1700 <MDIO_SetPinValue+0x1c>
    16fe:	e0 c0       	rjmp	.+448    	; 0x18c0 <MDIO_SetPinValue+0x1dc>
			{
				switch(Copy_u8PortNumber)
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	28 2f       	mov	r18, r24
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	3d 83       	std	Y+5, r19	; 0x05
    1708:	2c 83       	std	Y+4, r18	; 0x04
    170a:	8c 81       	ldd	r24, Y+4	; 0x04
    170c:	9d 81       	ldd	r25, Y+5	; 0x05
    170e:	81 30       	cpi	r24, 0x01	; 1
    1710:	91 05       	cpc	r25, r1
    1712:	09 f4       	brne	.+2      	; 0x1716 <MDIO_SetPinValue+0x32>
    1714:	47 c0       	rjmp	.+142    	; 0x17a4 <MDIO_SetPinValue+0xc0>
    1716:	2c 81       	ldd	r18, Y+4	; 0x04
    1718:	3d 81       	ldd	r19, Y+5	; 0x05
    171a:	22 30       	cpi	r18, 0x02	; 2
    171c:	31 05       	cpc	r19, r1
    171e:	2c f4       	brge	.+10     	; 0x172a <MDIO_SetPinValue+0x46>
    1720:	8c 81       	ldd	r24, Y+4	; 0x04
    1722:	9d 81       	ldd	r25, Y+5	; 0x05
    1724:	00 97       	sbiw	r24, 0x00	; 0
    1726:	71 f0       	breq	.+28     	; 0x1744 <MDIO_SetPinValue+0x60>
    1728:	cb c0       	rjmp	.+406    	; 0x18c0 <MDIO_SetPinValue+0x1dc>
    172a:	2c 81       	ldd	r18, Y+4	; 0x04
    172c:	3d 81       	ldd	r19, Y+5	; 0x05
    172e:	22 30       	cpi	r18, 0x02	; 2
    1730:	31 05       	cpc	r19, r1
    1732:	09 f4       	brne	.+2      	; 0x1736 <MDIO_SetPinValue+0x52>
    1734:	67 c0       	rjmp	.+206    	; 0x1804 <MDIO_SetPinValue+0x120>
    1736:	8c 81       	ldd	r24, Y+4	; 0x04
    1738:	9d 81       	ldd	r25, Y+5	; 0x05
    173a:	83 30       	cpi	r24, 0x03	; 3
    173c:	91 05       	cpc	r25, r1
    173e:	09 f4       	brne	.+2      	; 0x1742 <MDIO_SetPinValue+0x5e>
    1740:	91 c0       	rjmp	.+290    	; 0x1864 <MDIO_SetPinValue+0x180>
    1742:	be c0       	rjmp	.+380    	; 0x18c0 <MDIO_SetPinValue+0x1dc>
				{
					case MDIO_PORTA:
						if(Copy_u8PinValue==PinHigh)
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	81 30       	cpi	r24, 0x01	; 1
    1748:	a1 f4       	brne	.+40     	; 0x1772 <MDIO_SetPinValue+0x8e>
						{
							SET_BIT(PORTA,Copy_u8PinNumber);
    174a:	ab e3       	ldi	r26, 0x3B	; 59
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	eb e3       	ldi	r30, 0x3B	; 59
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	48 2f       	mov	r20, r24
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	28 2f       	mov	r18, r24
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	02 2e       	mov	r0, r18
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <MDIO_SetPinValue+0x84>
    1764:	88 0f       	add	r24, r24
    1766:	99 1f       	adc	r25, r25
    1768:	0a 94       	dec	r0
    176a:	e2 f7       	brpl	.-8      	; 0x1764 <MDIO_SetPinValue+0x80>
    176c:	84 2b       	or	r24, r20
    176e:	8c 93       	st	X, r24
    1770:	a7 c0       	rjmp	.+334    	; 0x18c0 <MDIO_SetPinValue+0x1dc>
						}
						else if(Copy_u8PinValue==PinLow)
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	88 23       	and	r24, r24
    1776:	09 f0       	breq	.+2      	; 0x177a <MDIO_SetPinValue+0x96>
    1778:	a3 c0       	rjmp	.+326    	; 0x18c0 <MDIO_SetPinValue+0x1dc>
						{
							CLR_BIT(PORTA,Copy_u8PinNumber);
    177a:	ab e3       	ldi	r26, 0x3B	; 59
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	eb e3       	ldi	r30, 0x3B	; 59
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	48 2f       	mov	r20, r24
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	02 2e       	mov	r0, r18
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <MDIO_SetPinValue+0xb4>
    1794:	88 0f       	add	r24, r24
    1796:	99 1f       	adc	r25, r25
    1798:	0a 94       	dec	r0
    179a:	e2 f7       	brpl	.-8      	; 0x1794 <MDIO_SetPinValue+0xb0>
    179c:	80 95       	com	r24
    179e:	84 23       	and	r24, r20
    17a0:	8c 93       	st	X, r24
    17a2:	8e c0       	rjmp	.+284    	; 0x18c0 <MDIO_SetPinValue+0x1dc>
									{
										//Invalid Pin Value
									}
					break;
					case MDIO_PORTB:
						if(Copy_u8PinValue==PinHigh)
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	81 30       	cpi	r24, 0x01	; 1
    17a8:	a1 f4       	brne	.+40     	; 0x17d2 <MDIO_SetPinValue+0xee>
						{
							SET_BIT(PORTB,Copy_u8PinNumber);
    17aa:	a8 e3       	ldi	r26, 0x38	; 56
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	e8 e3       	ldi	r30, 0x38	; 56
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	48 2f       	mov	r20, r24
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	02 2e       	mov	r0, r18
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <MDIO_SetPinValue+0xe4>
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	0a 94       	dec	r0
    17ca:	e2 f7       	brpl	.-8      	; 0x17c4 <MDIO_SetPinValue+0xe0>
    17cc:	84 2b       	or	r24, r20
    17ce:	8c 93       	st	X, r24
    17d0:	77 c0       	rjmp	.+238    	; 0x18c0 <MDIO_SetPinValue+0x1dc>
						}
						else if(Copy_u8PinValue==PinLow)
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	88 23       	and	r24, r24
    17d6:	09 f0       	breq	.+2      	; 0x17da <MDIO_SetPinValue+0xf6>
    17d8:	73 c0       	rjmp	.+230    	; 0x18c0 <MDIO_SetPinValue+0x1dc>
						{
							CLR_BIT(PORTB,Copy_u8PinNumber);
    17da:	a8 e3       	ldi	r26, 0x38	; 56
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e8 e3       	ldi	r30, 0x38	; 56
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	48 2f       	mov	r20, r24
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	02 2e       	mov	r0, r18
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <MDIO_SetPinValue+0x114>
    17f4:	88 0f       	add	r24, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	0a 94       	dec	r0
    17fa:	e2 f7       	brpl	.-8      	; 0x17f4 <MDIO_SetPinValue+0x110>
    17fc:	80 95       	com	r24
    17fe:	84 23       	and	r24, r20
    1800:	8c 93       	st	X, r24
    1802:	5e c0       	rjmp	.+188    	; 0x18c0 <MDIO_SetPinValue+0x1dc>
									{
										//Invalid Pin Value
									}
					break;
					case MDIO_PORTC:
						if(Copy_u8PinValue==PinHigh)
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	81 30       	cpi	r24, 0x01	; 1
    1808:	a1 f4       	brne	.+40     	; 0x1832 <MDIO_SetPinValue+0x14e>
						{
							SET_BIT(PORTC,Copy_u8PinNumber);
    180a:	a5 e3       	ldi	r26, 0x35	; 53
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	e5 e3       	ldi	r30, 0x35	; 53
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	48 2f       	mov	r20, r24
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	02 2e       	mov	r0, r18
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <MDIO_SetPinValue+0x144>
    1824:	88 0f       	add	r24, r24
    1826:	99 1f       	adc	r25, r25
    1828:	0a 94       	dec	r0
    182a:	e2 f7       	brpl	.-8      	; 0x1824 <MDIO_SetPinValue+0x140>
    182c:	84 2b       	or	r24, r20
    182e:	8c 93       	st	X, r24
    1830:	47 c0       	rjmp	.+142    	; 0x18c0 <MDIO_SetPinValue+0x1dc>
						}
						else if(Copy_u8PinValue==PinLow)
    1832:	8b 81       	ldd	r24, Y+3	; 0x03
    1834:	88 23       	and	r24, r24
    1836:	09 f0       	breq	.+2      	; 0x183a <MDIO_SetPinValue+0x156>
    1838:	43 c0       	rjmp	.+134    	; 0x18c0 <MDIO_SetPinValue+0x1dc>
						{
							CLR_BIT(PORTC,Copy_u8PinNumber);
    183a:	a5 e3       	ldi	r26, 0x35	; 53
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e5 e3       	ldi	r30, 0x35	; 53
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	48 2f       	mov	r20, r24
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	02 2e       	mov	r0, r18
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <MDIO_SetPinValue+0x174>
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	0a 94       	dec	r0
    185a:	e2 f7       	brpl	.-8      	; 0x1854 <MDIO_SetPinValue+0x170>
    185c:	80 95       	com	r24
    185e:	84 23       	and	r24, r20
    1860:	8c 93       	st	X, r24
    1862:	2e c0       	rjmp	.+92     	; 0x18c0 <MDIO_SetPinValue+0x1dc>
						{
							//Invalid Pin Value
						}
					break;
					case MDIO_PORTD:
						if(Copy_u8PinValue==PinHigh)
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	81 30       	cpi	r24, 0x01	; 1
    1868:	a1 f4       	brne	.+40     	; 0x1892 <MDIO_SetPinValue+0x1ae>
						{
							SET_BIT(PORTD,Copy_u8PinNumber);
    186a:	a2 e3       	ldi	r26, 0x32	; 50
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	e2 e3       	ldi	r30, 0x32	; 50
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	48 2f       	mov	r20, r24
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	28 2f       	mov	r18, r24
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	02 2e       	mov	r0, r18
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <MDIO_SetPinValue+0x1a4>
    1884:	88 0f       	add	r24, r24
    1886:	99 1f       	adc	r25, r25
    1888:	0a 94       	dec	r0
    188a:	e2 f7       	brpl	.-8      	; 0x1884 <MDIO_SetPinValue+0x1a0>
    188c:	84 2b       	or	r24, r20
    188e:	8c 93       	st	X, r24
    1890:	17 c0       	rjmp	.+46     	; 0x18c0 <MDIO_SetPinValue+0x1dc>
						}
						else if(Copy_u8PinValue==PinLow)
    1892:	8b 81       	ldd	r24, Y+3	; 0x03
    1894:	88 23       	and	r24, r24
    1896:	a1 f4       	brne	.+40     	; 0x18c0 <MDIO_SetPinValue+0x1dc>
						{
							CLR_BIT(PORTD,Copy_u8PinNumber);
    1898:	a2 e3       	ldi	r26, 0x32	; 50
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	e2 e3       	ldi	r30, 0x32	; 50
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	48 2f       	mov	r20, r24
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	02 2e       	mov	r0, r18
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <MDIO_SetPinValue+0x1d2>
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	0a 94       	dec	r0
    18b8:	e2 f7       	brpl	.-8      	; 0x18b2 <MDIO_SetPinValue+0x1ce>
    18ba:	80 95       	com	r24
    18bc:	84 23       	and	r24, r20
    18be:	8c 93       	st	X, r24
			}
	else
		{
		/*Invalid Pin Value */
		}
}
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	cf 91       	pop	r28
    18cc:	df 91       	pop	r29
    18ce:	08 95       	ret

000018d0 <MDIO_TogglePin>:

void MDIO_TogglePin(u8 Copy_u8PinNumber, u8 Copy_PortNumber)
{
    18d0:	df 93       	push	r29
    18d2:	cf 93       	push	r28
    18d4:	00 d0       	rcall	.+0      	; 0x18d6 <MDIO_TogglePin+0x6>
    18d6:	00 d0       	rcall	.+0      	; 0x18d8 <MDIO_TogglePin+0x8>
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
    18dc:	89 83       	std	Y+1, r24	; 0x01
    18de:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8PinNumber>=0||Copy_u8PinNumber>8))
	{
		switch(Copy_PortNumber)
    18e0:	8a 81       	ldd	r24, Y+2	; 0x02
    18e2:	28 2f       	mov	r18, r24
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	3c 83       	std	Y+4, r19	; 0x04
    18e8:	2b 83       	std	Y+3, r18	; 0x03
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	9c 81       	ldd	r25, Y+4	; 0x04
    18ee:	81 30       	cpi	r24, 0x01	; 1
    18f0:	91 05       	cpc	r25, r1
    18f2:	49 f1       	breq	.+82     	; 0x1946 <MDIO_TogglePin+0x76>
    18f4:	2b 81       	ldd	r18, Y+3	; 0x03
    18f6:	3c 81       	ldd	r19, Y+4	; 0x04
    18f8:	22 30       	cpi	r18, 0x02	; 2
    18fa:	31 05       	cpc	r19, r1
    18fc:	2c f4       	brge	.+10     	; 0x1908 <MDIO_TogglePin+0x38>
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	9c 81       	ldd	r25, Y+4	; 0x04
    1902:	00 97       	sbiw	r24, 0x00	; 0
    1904:	61 f0       	breq	.+24     	; 0x191e <MDIO_TogglePin+0x4e>
    1906:	5a c0       	rjmp	.+180    	; 0x19bc <MDIO_TogglePin+0xec>
    1908:	2b 81       	ldd	r18, Y+3	; 0x03
    190a:	3c 81       	ldd	r19, Y+4	; 0x04
    190c:	22 30       	cpi	r18, 0x02	; 2
    190e:	31 05       	cpc	r19, r1
    1910:	71 f1       	breq	.+92     	; 0x196e <MDIO_TogglePin+0x9e>
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	9c 81       	ldd	r25, Y+4	; 0x04
    1916:	83 30       	cpi	r24, 0x03	; 3
    1918:	91 05       	cpc	r25, r1
    191a:	e9 f1       	breq	.+122    	; 0x1996 <MDIO_TogglePin+0xc6>
    191c:	4f c0       	rjmp	.+158    	; 0x19bc <MDIO_TogglePin+0xec>
		{
		case MDIO_PORTA:
			TOGGLE_BIT(PORTA,Copy_u8PinNumber);
    191e:	ab e3       	ldi	r26, 0x3B	; 59
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	eb e3       	ldi	r30, 0x3B	; 59
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	48 2f       	mov	r20, r24
    192a:	89 81       	ldd	r24, Y+1	; 0x01
    192c:	28 2f       	mov	r18, r24
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	02 2e       	mov	r0, r18
    1936:	02 c0       	rjmp	.+4      	; 0x193c <MDIO_TogglePin+0x6c>
    1938:	88 0f       	add	r24, r24
    193a:	99 1f       	adc	r25, r25
    193c:	0a 94       	dec	r0
    193e:	e2 f7       	brpl	.-8      	; 0x1938 <MDIO_TogglePin+0x68>
    1940:	84 27       	eor	r24, r20
    1942:	8c 93       	st	X, r24
    1944:	3b c0       	rjmp	.+118    	; 0x19bc <MDIO_TogglePin+0xec>
			break;
		case MDIO_PORTB:
			TOGGLE_BIT(PORTB,Copy_u8PinNumber);
    1946:	a8 e3       	ldi	r26, 0x38	; 56
    1948:	b0 e0       	ldi	r27, 0x00	; 0
    194a:	e8 e3       	ldi	r30, 0x38	; 56
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	48 2f       	mov	r20, r24
    1952:	89 81       	ldd	r24, Y+1	; 0x01
    1954:	28 2f       	mov	r18, r24
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	02 2e       	mov	r0, r18
    195e:	02 c0       	rjmp	.+4      	; 0x1964 <MDIO_TogglePin+0x94>
    1960:	88 0f       	add	r24, r24
    1962:	99 1f       	adc	r25, r25
    1964:	0a 94       	dec	r0
    1966:	e2 f7       	brpl	.-8      	; 0x1960 <MDIO_TogglePin+0x90>
    1968:	84 27       	eor	r24, r20
    196a:	8c 93       	st	X, r24
    196c:	27 c0       	rjmp	.+78     	; 0x19bc <MDIO_TogglePin+0xec>
			break;
		case MDIO_PORTC:
			TOGGLE_BIT(PORTC,Copy_u8PinNumber);
    196e:	a5 e3       	ldi	r26, 0x35	; 53
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	e5 e3       	ldi	r30, 0x35	; 53
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	48 2f       	mov	r20, r24
    197a:	89 81       	ldd	r24, Y+1	; 0x01
    197c:	28 2f       	mov	r18, r24
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	02 2e       	mov	r0, r18
    1986:	02 c0       	rjmp	.+4      	; 0x198c <MDIO_TogglePin+0xbc>
    1988:	88 0f       	add	r24, r24
    198a:	99 1f       	adc	r25, r25
    198c:	0a 94       	dec	r0
    198e:	e2 f7       	brpl	.-8      	; 0x1988 <MDIO_TogglePin+0xb8>
    1990:	84 27       	eor	r24, r20
    1992:	8c 93       	st	X, r24
    1994:	13 c0       	rjmp	.+38     	; 0x19bc <MDIO_TogglePin+0xec>
			break;
		case MDIO_PORTD:
			TOGGLE_BIT(PORTD,Copy_u8PinNumber);
    1996:	a2 e3       	ldi	r26, 0x32	; 50
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	e2 e3       	ldi	r30, 0x32	; 50
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	48 2f       	mov	r20, r24
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	28 2f       	mov	r18, r24
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	02 2e       	mov	r0, r18
    19ae:	02 c0       	rjmp	.+4      	; 0x19b4 <MDIO_TogglePin+0xe4>
    19b0:	88 0f       	add	r24, r24
    19b2:	99 1f       	adc	r25, r25
    19b4:	0a 94       	dec	r0
    19b6:	e2 f7       	brpl	.-8      	; 0x19b0 <MDIO_TogglePin+0xe0>
    19b8:	84 27       	eor	r24, r20
    19ba:	8c 93       	st	X, r24
	}
	else
	{
		/*Invalid Pin Number */
	}
}
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	cf 91       	pop	r28
    19c6:	df 91       	pop	r29
    19c8:	08 95       	ret

000019ca <MDIO_SetNibbleValue>:
void MDIO_SetNibbleValue(u8 Copyu8PinStart, u8 Copyu8PortNumber, u8 Copyu8Value)
{
    19ca:	df 93       	push	r29
    19cc:	cf 93       	push	r28
    19ce:	00 d0       	rcall	.+0      	; 0x19d0 <MDIO_SetNibbleValue+0x6>
    19d0:	00 d0       	rcall	.+0      	; 0x19d2 <MDIO_SetNibbleValue+0x8>
    19d2:	00 d0       	rcall	.+0      	; 0x19d4 <MDIO_SetNibbleValue+0xa>
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
    19d8:	8a 83       	std	Y+2, r24	; 0x02
    19da:	6b 83       	std	Y+3, r22	; 0x03
    19dc:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Value=Copyu8Value;
    19de:	8c 81       	ldd	r24, Y+4	; 0x04
    19e0:	89 83       	std	Y+1, r24	; 0x01
	Loc_u8Value=((Loc_u8Value&0x0F)<<Copyu8PinStart);
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
    19e4:	88 2f       	mov	r24, r24
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	9c 01       	movw	r18, r24
    19ea:	2f 70       	andi	r18, 0x0F	; 15
    19ec:	30 70       	andi	r19, 0x00	; 0
    19ee:	8a 81       	ldd	r24, Y+2	; 0x02
    19f0:	88 2f       	mov	r24, r24
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	a9 01       	movw	r20, r18
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <MDIO_SetNibbleValue+0x32>
    19f8:	44 0f       	add	r20, r20
    19fa:	55 1f       	adc	r21, r21
    19fc:	8a 95       	dec	r24
    19fe:	e2 f7       	brpl	.-8      	; 0x19f8 <MDIO_SetNibbleValue+0x2e>
    1a00:	ca 01       	movw	r24, r20
    1a02:	89 83       	std	Y+1, r24	; 0x01
	if(Copyu8PinStart>=0&&Copyu8PinStart<=4)
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	85 30       	cpi	r24, 0x05	; 5
    1a08:	08 f0       	brcs	.+2      	; 0x1a0c <MDIO_SetNibbleValue+0x42>
    1a0a:	95 c0       	rjmp	.+298    	; 0x1b36 <MDIO_SetNibbleValue+0x16c>
	{
		switch (Copyu8PortNumber)
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	28 2f       	mov	r18, r24
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	3e 83       	std	Y+6, r19	; 0x06
    1a14:	2d 83       	std	Y+5, r18	; 0x05
    1a16:	4d 81       	ldd	r20, Y+5	; 0x05
    1a18:	5e 81       	ldd	r21, Y+6	; 0x06
    1a1a:	41 30       	cpi	r20, 0x01	; 1
    1a1c:	51 05       	cpc	r21, r1
    1a1e:	a9 f1       	breq	.+106    	; 0x1a8a <MDIO_SetNibbleValue+0xc0>
    1a20:	8d 81       	ldd	r24, Y+5	; 0x05
    1a22:	9e 81       	ldd	r25, Y+6	; 0x06
    1a24:	82 30       	cpi	r24, 0x02	; 2
    1a26:	91 05       	cpc	r25, r1
    1a28:	34 f4       	brge	.+12     	; 0x1a36 <MDIO_SetNibbleValue+0x6c>
    1a2a:	2d 81       	ldd	r18, Y+5	; 0x05
    1a2c:	3e 81       	ldd	r19, Y+6	; 0x06
    1a2e:	21 15       	cp	r18, r1
    1a30:	31 05       	cpc	r19, r1
    1a32:	71 f0       	breq	.+28     	; 0x1a50 <MDIO_SetNibbleValue+0x86>
    1a34:	80 c0       	rjmp	.+256    	; 0x1b36 <MDIO_SetNibbleValue+0x16c>
    1a36:	4d 81       	ldd	r20, Y+5	; 0x05
    1a38:	5e 81       	ldd	r21, Y+6	; 0x06
    1a3a:	42 30       	cpi	r20, 0x02	; 2
    1a3c:	51 05       	cpc	r21, r1
    1a3e:	09 f4       	brne	.+2      	; 0x1a42 <MDIO_SetNibbleValue+0x78>
    1a40:	41 c0       	rjmp	.+130    	; 0x1ac4 <MDIO_SetNibbleValue+0xfa>
    1a42:	8d 81       	ldd	r24, Y+5	; 0x05
    1a44:	9e 81       	ldd	r25, Y+6	; 0x06
    1a46:	83 30       	cpi	r24, 0x03	; 3
    1a48:	91 05       	cpc	r25, r1
    1a4a:	09 f4       	brne	.+2      	; 0x1a4e <MDIO_SetNibbleValue+0x84>
    1a4c:	58 c0       	rjmp	.+176    	; 0x1afe <MDIO_SetNibbleValue+0x134>
    1a4e:	73 c0       	rjmp	.+230    	; 0x1b36 <MDIO_SetNibbleValue+0x16c>
		{
		case MDIO_PORTA:
			PORTA&=(~((0X0F)<<Copyu8PinStart));
    1a50:	ab e3       	ldi	r26, 0x3B	; 59
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	eb e3       	ldi	r30, 0x3B	; 59
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	48 2f       	mov	r20, r24
    1a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5e:	28 2f       	mov	r18, r24
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	8f e0       	ldi	r24, 0x0F	; 15
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	02 2e       	mov	r0, r18
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <MDIO_SetNibbleValue+0xa4>
    1a6a:	88 0f       	add	r24, r24
    1a6c:	99 1f       	adc	r25, r25
    1a6e:	0a 94       	dec	r0
    1a70:	e2 f7       	brpl	.-8      	; 0x1a6a <MDIO_SetNibbleValue+0xa0>
    1a72:	80 95       	com	r24
    1a74:	84 23       	and	r24, r20
    1a76:	8c 93       	st	X, r24
			PORTA|=Loc_u8Value;
    1a78:	ab e3       	ldi	r26, 0x3B	; 59
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	eb e3       	ldi	r30, 0x3B	; 59
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	90 81       	ld	r25, Z
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
    1a84:	89 2b       	or	r24, r25
    1a86:	8c 93       	st	X, r24
    1a88:	56 c0       	rjmp	.+172    	; 0x1b36 <MDIO_SetNibbleValue+0x16c>
			break;
		case MDIO_PORTB:
			PORTB&=(~((0X0F)<<Copyu8PinStart));
    1a8a:	a8 e3       	ldi	r26, 0x38	; 56
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	e8 e3       	ldi	r30, 0x38	; 56
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	48 2f       	mov	r20, r24
    1a96:	8a 81       	ldd	r24, Y+2	; 0x02
    1a98:	28 2f       	mov	r18, r24
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	8f e0       	ldi	r24, 0x0F	; 15
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	02 2e       	mov	r0, r18
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <MDIO_SetNibbleValue+0xde>
    1aa4:	88 0f       	add	r24, r24
    1aa6:	99 1f       	adc	r25, r25
    1aa8:	0a 94       	dec	r0
    1aaa:	e2 f7       	brpl	.-8      	; 0x1aa4 <MDIO_SetNibbleValue+0xda>
    1aac:	80 95       	com	r24
    1aae:	84 23       	and	r24, r20
    1ab0:	8c 93       	st	X, r24
			PORTB|=Loc_u8Value;
    1ab2:	a8 e3       	ldi	r26, 0x38	; 56
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	e8 e3       	ldi	r30, 0x38	; 56
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	90 81       	ld	r25, Z
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	89 2b       	or	r24, r25
    1ac0:	8c 93       	st	X, r24
    1ac2:	39 c0       	rjmp	.+114    	; 0x1b36 <MDIO_SetNibbleValue+0x16c>
			break;
		case MDIO_PORTC:
			PORTC&=(~((0X0F)<<Copyu8PinStart));
    1ac4:	a5 e3       	ldi	r26, 0x35	; 53
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	e5 e3       	ldi	r30, 0x35	; 53
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	48 2f       	mov	r20, r24
    1ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad2:	28 2f       	mov	r18, r24
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	8f e0       	ldi	r24, 0x0F	; 15
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	02 2e       	mov	r0, r18
    1adc:	02 c0       	rjmp	.+4      	; 0x1ae2 <MDIO_SetNibbleValue+0x118>
    1ade:	88 0f       	add	r24, r24
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	0a 94       	dec	r0
    1ae4:	e2 f7       	brpl	.-8      	; 0x1ade <MDIO_SetNibbleValue+0x114>
    1ae6:	80 95       	com	r24
    1ae8:	84 23       	and	r24, r20
    1aea:	8c 93       	st	X, r24
			PORTC|=Loc_u8Value;
    1aec:	a5 e3       	ldi	r26, 0x35	; 53
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	e5 e3       	ldi	r30, 0x35	; 53
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	90 81       	ld	r25, Z
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	89 2b       	or	r24, r25
    1afa:	8c 93       	st	X, r24
    1afc:	1c c0       	rjmp	.+56     	; 0x1b36 <MDIO_SetNibbleValue+0x16c>
			break;
		case MDIO_PORTD:
			PORTD&=(~((0X0F)<<Copyu8PinStart));
    1afe:	a2 e3       	ldi	r26, 0x32	; 50
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	e2 e3       	ldi	r30, 0x32	; 50
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	48 2f       	mov	r20, r24
    1b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0c:	28 2f       	mov	r18, r24
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	8f e0       	ldi	r24, 0x0F	; 15
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	02 2e       	mov	r0, r18
    1b16:	02 c0       	rjmp	.+4      	; 0x1b1c <MDIO_SetNibbleValue+0x152>
    1b18:	88 0f       	add	r24, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	0a 94       	dec	r0
    1b1e:	e2 f7       	brpl	.-8      	; 0x1b18 <MDIO_SetNibbleValue+0x14e>
    1b20:	80 95       	com	r24
    1b22:	84 23       	and	r24, r20
    1b24:	8c 93       	st	X, r24
			PORTD|=Loc_u8Value;
    1b26:	a2 e3       	ldi	r26, 0x32	; 50
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	e2 e3       	ldi	r30, 0x32	; 50
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	90 81       	ld	r25, Z
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	89 2b       	or	r24, r25
    1b34:	8c 93       	st	X, r24
			break;
		}
	}

}
    1b36:	26 96       	adiw	r28, 0x06	; 6
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	de bf       	out	0x3e, r29	; 62
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	08 95       	ret

00001b48 <HCLCD_WriteCommand4Bit>:
#include"HCLCD_Interface.h"
#include"HCLCD_Config.h"


void HCLCD_WriteCommand4Bit(u8 Copy_u8Command)
{
    1b48:	df 93       	push	r29
    1b4a:	cf 93       	push	r28
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	6d 97       	sbiw	r28, 0x1d	; 29
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	cd bf       	out	0x3d, r28	; 61
    1b5c:	8d 8f       	std	Y+29, r24	; 0x1d
	//Set RW to Zero
	MDIO_SetPinValue(CONTROL_PORT, RW, PinLow);
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	62 e0       	ldi	r22, 0x02	; 2
    1b62:	40 e0       	ldi	r20, 0x00	; 0
    1b64:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <MDIO_SetPinValue>

	//Set RS to Zero ==> to indicate a Command
	MDIO_SetPinValue(CONTROL_PORT, RS, PinLow);
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	61 e0       	ldi	r22, 0x01	; 1
    1b6c:	40 e0       	ldi	r20, 0x00	; 0
    1b6e:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <MDIO_SetPinValue>

	//Set High Nibble Value of the Command
	MDIO_SetNibbleValue(HCLCD_PIN_START, DATA_PORT, Copy_u8Command>>4);
    1b72:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b74:	98 2f       	mov	r25, r24
    1b76:	92 95       	swap	r25
    1b78:	9f 70       	andi	r25, 0x0F	; 15
    1b7a:	84 e0       	ldi	r24, 0x04	; 4
    1b7c:	60 e0       	ldi	r22, 0x00	; 0
    1b7e:	49 2f       	mov	r20, r25
    1b80:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <MDIO_SetNibbleValue>
	//Send the Falling Edge
	MDIO_SetPinValue(CONTROL_PORT, E, PinHigh);
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	63 e0       	ldi	r22, 0x03	; 3
    1b88:	41 e0       	ldi	r20, 0x01	; 1
    1b8a:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <MDIO_SetPinValue>
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	a0 e0       	ldi	r26, 0x00	; 0
    1b94:	b0 e4       	ldi	r27, 0x40	; 64
    1b96:	89 8f       	std	Y+25, r24	; 0x19
    1b98:	9a 8f       	std	Y+26, r25	; 0x1a
    1b9a:	ab 8f       	std	Y+27, r26	; 0x1b
    1b9c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b9e:	69 8d       	ldd	r22, Y+25	; 0x19
    1ba0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ba2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ba4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	4a e7       	ldi	r20, 0x7A	; 122
    1bac:	55 e4       	ldi	r21, 0x45	; 69
    1bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	8d 8b       	std	Y+21, r24	; 0x15
    1bb8:	9e 8b       	std	Y+22, r25	; 0x16
    1bba:	af 8b       	std	Y+23, r26	; 0x17
    1bbc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bbe:	6d 89       	ldd	r22, Y+21	; 0x15
    1bc0:	7e 89       	ldd	r23, Y+22	; 0x16
    1bc2:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc4:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	40 e8       	ldi	r20, 0x80	; 128
    1bcc:	5f e3       	ldi	r21, 0x3F	; 63
    1bce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bd2:	88 23       	and	r24, r24
    1bd4:	2c f4       	brge	.+10     	; 0x1be0 <HCLCD_WriteCommand4Bit+0x98>
		__ticks = 1;
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	9c 8b       	std	Y+20, r25	; 0x14
    1bdc:	8b 8b       	std	Y+19, r24	; 0x13
    1bde:	3f c0       	rjmp	.+126    	; 0x1c5e <HCLCD_WriteCommand4Bit+0x116>
	else if (__tmp > 65535)
    1be0:	6d 89       	ldd	r22, Y+21	; 0x15
    1be2:	7e 89       	ldd	r23, Y+22	; 0x16
    1be4:	8f 89       	ldd	r24, Y+23	; 0x17
    1be6:	98 8d       	ldd	r25, Y+24	; 0x18
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	3f ef       	ldi	r19, 0xFF	; 255
    1bec:	4f e7       	ldi	r20, 0x7F	; 127
    1bee:	57 e4       	ldi	r21, 0x47	; 71
    1bf0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bf4:	18 16       	cp	r1, r24
    1bf6:	4c f5       	brge	.+82     	; 0x1c4a <HCLCD_WriteCommand4Bit+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf8:	69 8d       	ldd	r22, Y+25	; 0x19
    1bfa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bfc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bfe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	40 e2       	ldi	r20, 0x20	; 32
    1c06:	51 e4       	ldi	r21, 0x41	; 65
    1c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	bc 01       	movw	r22, r24
    1c12:	cd 01       	movw	r24, r26
    1c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	9c 8b       	std	Y+20, r25	; 0x14
    1c1e:	8b 8b       	std	Y+19, r24	; 0x13
    1c20:	0f c0       	rjmp	.+30     	; 0x1c40 <HCLCD_WriteCommand4Bit+0xf8>
    1c22:	80 e9       	ldi	r24, 0x90	; 144
    1c24:	91 e0       	ldi	r25, 0x01	; 1
    1c26:	9a 8b       	std	Y+18, r25	; 0x12
    1c28:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c2a:	89 89       	ldd	r24, Y+17	; 0x11
    1c2c:	9a 89       	ldd	r25, Y+18	; 0x12
    1c2e:	01 97       	sbiw	r24, 0x01	; 1
    1c30:	f1 f7       	brne	.-4      	; 0x1c2e <HCLCD_WriteCommand4Bit+0xe6>
    1c32:	9a 8b       	std	Y+18, r25	; 0x12
    1c34:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c36:	8b 89       	ldd	r24, Y+19	; 0x13
    1c38:	9c 89       	ldd	r25, Y+20	; 0x14
    1c3a:	01 97       	sbiw	r24, 0x01	; 1
    1c3c:	9c 8b       	std	Y+20, r25	; 0x14
    1c3e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c40:	8b 89       	ldd	r24, Y+19	; 0x13
    1c42:	9c 89       	ldd	r25, Y+20	; 0x14
    1c44:	00 97       	sbiw	r24, 0x00	; 0
    1c46:	69 f7       	brne	.-38     	; 0x1c22 <HCLCD_WriteCommand4Bit+0xda>
    1c48:	14 c0       	rjmp	.+40     	; 0x1c72 <HCLCD_WriteCommand4Bit+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c50:	98 8d       	ldd	r25, Y+24	; 0x18
    1c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	9c 8b       	std	Y+20, r25	; 0x14
    1c5c:	8b 8b       	std	Y+19, r24	; 0x13
    1c5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c60:	9c 89       	ldd	r25, Y+20	; 0x14
    1c62:	98 8b       	std	Y+16, r25	; 0x10
    1c64:	8f 87       	std	Y+15, r24	; 0x0f
    1c66:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c68:	98 89       	ldd	r25, Y+16	; 0x10
    1c6a:	01 97       	sbiw	r24, 0x01	; 1
    1c6c:	f1 f7       	brne	.-4      	; 0x1c6a <HCLCD_WriteCommand4Bit+0x122>
    1c6e:	98 8b       	std	Y+16, r25	; 0x10
    1c70:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_SetPinValue(CONTROL_PORT, E, PinLow);
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	63 e0       	ldi	r22, 0x03	; 3
    1c76:	40 e0       	ldi	r20, 0x00	; 0
    1c78:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <MDIO_SetPinValue>

	//Send The Lower Nibble
	MDIO_SetNibbleValue(HCLCD_PIN_START, DATA_PORT, Copy_u8Command);
    1c7c:	84 e0       	ldi	r24, 0x04	; 4
    1c7e:	60 e0       	ldi	r22, 0x00	; 0
    1c80:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1c82:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <MDIO_SetNibbleValue>

	//Send the Falling Edge
	MDIO_SetPinValue(CONTROL_PORT, E, PinHigh);
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	63 e0       	ldi	r22, 0x03	; 3
    1c8a:	41 e0       	ldi	r20, 0x01	; 1
    1c8c:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <MDIO_SetPinValue>
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	a0 e0       	ldi	r26, 0x00	; 0
    1c96:	b0 e4       	ldi	r27, 0x40	; 64
    1c98:	8b 87       	std	Y+11, r24	; 0x0b
    1c9a:	9c 87       	std	Y+12, r25	; 0x0c
    1c9c:	ad 87       	std	Y+13, r26	; 0x0d
    1c9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	4a e7       	ldi	r20, 0x7A	; 122
    1cae:	55 e4       	ldi	r21, 0x45	; 69
    1cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	8f 83       	std	Y+7, r24	; 0x07
    1cba:	98 87       	std	Y+8, r25	; 0x08
    1cbc:	a9 87       	std	Y+9, r26	; 0x09
    1cbe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc2:	78 85       	ldd	r23, Y+8	; 0x08
    1cc4:	89 85       	ldd	r24, Y+9	; 0x09
    1cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	40 e8       	ldi	r20, 0x80	; 128
    1cce:	5f e3       	ldi	r21, 0x3F	; 63
    1cd0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cd4:	88 23       	and	r24, r24
    1cd6:	2c f4       	brge	.+10     	; 0x1ce2 <HCLCD_WriteCommand4Bit+0x19a>
		__ticks = 1;
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	9e 83       	std	Y+6, r25	; 0x06
    1cde:	8d 83       	std	Y+5, r24	; 0x05
    1ce0:	3f c0       	rjmp	.+126    	; 0x1d60 <HCLCD_WriteCommand4Bit+0x218>
	else if (__tmp > 65535)
    1ce2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce4:	78 85       	ldd	r23, Y+8	; 0x08
    1ce6:	89 85       	ldd	r24, Y+9	; 0x09
    1ce8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	3f ef       	ldi	r19, 0xFF	; 255
    1cee:	4f e7       	ldi	r20, 0x7F	; 127
    1cf0:	57 e4       	ldi	r21, 0x47	; 71
    1cf2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cf6:	18 16       	cp	r1, r24
    1cf8:	4c f5       	brge	.+82     	; 0x1d4c <HCLCD_WriteCommand4Bit+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	40 e2       	ldi	r20, 0x20	; 32
    1d08:	51 e4       	ldi	r21, 0x41	; 65
    1d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	bc 01       	movw	r22, r24
    1d14:	cd 01       	movw	r24, r26
    1d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	9e 83       	std	Y+6, r25	; 0x06
    1d20:	8d 83       	std	Y+5, r24	; 0x05
    1d22:	0f c0       	rjmp	.+30     	; 0x1d42 <HCLCD_WriteCommand4Bit+0x1fa>
    1d24:	80 e9       	ldi	r24, 0x90	; 144
    1d26:	91 e0       	ldi	r25, 0x01	; 1
    1d28:	9c 83       	std	Y+4, r25	; 0x04
    1d2a:	8b 83       	std	Y+3, r24	; 0x03
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d30:	01 97       	sbiw	r24, 0x01	; 1
    1d32:	f1 f7       	brne	.-4      	; 0x1d30 <HCLCD_WriteCommand4Bit+0x1e8>
    1d34:	9c 83       	std	Y+4, r25	; 0x04
    1d36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d38:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3c:	01 97       	sbiw	r24, 0x01	; 1
    1d3e:	9e 83       	std	Y+6, r25	; 0x06
    1d40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d42:	8d 81       	ldd	r24, Y+5	; 0x05
    1d44:	9e 81       	ldd	r25, Y+6	; 0x06
    1d46:	00 97       	sbiw	r24, 0x00	; 0
    1d48:	69 f7       	brne	.-38     	; 0x1d24 <HCLCD_WriteCommand4Bit+0x1dc>
    1d4a:	14 c0       	rjmp	.+40     	; 0x1d74 <HCLCD_WriteCommand4Bit+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d4e:	78 85       	ldd	r23, Y+8	; 0x08
    1d50:	89 85       	ldd	r24, Y+9	; 0x09
    1d52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	9e 83       	std	Y+6, r25	; 0x06
    1d5e:	8d 83       	std	Y+5, r24	; 0x05
    1d60:	8d 81       	ldd	r24, Y+5	; 0x05
    1d62:	9e 81       	ldd	r25, Y+6	; 0x06
    1d64:	9a 83       	std	Y+2, r25	; 0x02
    1d66:	89 83       	std	Y+1, r24	; 0x01
    1d68:	89 81       	ldd	r24, Y+1	; 0x01
    1d6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d6c:	01 97       	sbiw	r24, 0x01	; 1
    1d6e:	f1 f7       	brne	.-4      	; 0x1d6c <HCLCD_WriteCommand4Bit+0x224>
    1d70:	9a 83       	std	Y+2, r25	; 0x02
    1d72:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_SetPinValue(CONTROL_PORT, E, PinLow);
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	63 e0       	ldi	r22, 0x03	; 3
    1d78:	40 e0       	ldi	r20, 0x00	; 0
    1d7a:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <MDIO_SetPinValue>
}
    1d7e:	6d 96       	adiw	r28, 0x1d	; 29
    1d80:	0f b6       	in	r0, 0x3f	; 63
    1d82:	f8 94       	cli
    1d84:	de bf       	out	0x3e, r29	; 62
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	cd bf       	out	0x3d, r28	; 61
    1d8a:	cf 91       	pop	r28
    1d8c:	df 91       	pop	r29
    1d8e:	08 95       	ret

00001d90 <HCLCD_Init4Bit>:

void HCLCD_Init4Bit()
{
    1d90:	0f 93       	push	r16
    1d92:	1f 93       	push	r17
    1d94:	df 93       	push	r29
    1d96:	cf 93       	push	r28
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
    1d9c:	c7 54       	subi	r28, 0x47	; 71
    1d9e:	d0 40       	sbci	r29, 0x00	; 0
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	f8 94       	cli
    1da4:	de bf       	out	0x3e, r29	; 62
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	cd bf       	out	0x3d, r28	; 61
    1daa:	fe 01       	movw	r30, r28
    1dac:	ed 5b       	subi	r30, 0xBD	; 189
    1dae:	ff 4f       	sbci	r31, 0xFF	; 255
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	a0 ef       	ldi	r26, 0xF0	; 240
    1db6:	b1 e4       	ldi	r27, 0x41	; 65
    1db8:	80 83       	st	Z, r24
    1dba:	91 83       	std	Z+1, r25	; 0x01
    1dbc:	a2 83       	std	Z+2, r26	; 0x02
    1dbe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc0:	8e 01       	movw	r16, r28
    1dc2:	01 5c       	subi	r16, 0xC1	; 193
    1dc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc6:	fe 01       	movw	r30, r28
    1dc8:	ed 5b       	subi	r30, 0xBD	; 189
    1dca:	ff 4f       	sbci	r31, 0xFF	; 255
    1dcc:	60 81       	ld	r22, Z
    1dce:	71 81       	ldd	r23, Z+1	; 0x01
    1dd0:	82 81       	ldd	r24, Z+2	; 0x02
    1dd2:	93 81       	ldd	r25, Z+3	; 0x03
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	4a e7       	ldi	r20, 0x7A	; 122
    1dda:	55 e4       	ldi	r21, 0x45	; 69
    1ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	f8 01       	movw	r30, r16
    1de6:	80 83       	st	Z, r24
    1de8:	91 83       	std	Z+1, r25	; 0x01
    1dea:	a2 83       	std	Z+2, r26	; 0x02
    1dec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dee:	fe 01       	movw	r30, r28
    1df0:	ff 96       	adiw	r30, 0x3f	; 63
    1df2:	60 81       	ld	r22, Z
    1df4:	71 81       	ldd	r23, Z+1	; 0x01
    1df6:	82 81       	ldd	r24, Z+2	; 0x02
    1df8:	93 81       	ldd	r25, Z+3	; 0x03
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	40 e8       	ldi	r20, 0x80	; 128
    1e00:	5f e3       	ldi	r21, 0x3F	; 63
    1e02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e06:	88 23       	and	r24, r24
    1e08:	2c f4       	brge	.+10     	; 0x1e14 <HCLCD_Init4Bit+0x84>
		__ticks = 1;
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	9e af       	std	Y+62, r25	; 0x3e
    1e10:	8d af       	std	Y+61, r24	; 0x3d
    1e12:	46 c0       	rjmp	.+140    	; 0x1ea0 <HCLCD_Init4Bit+0x110>
	else if (__tmp > 65535)
    1e14:	fe 01       	movw	r30, r28
    1e16:	ff 96       	adiw	r30, 0x3f	; 63
    1e18:	60 81       	ld	r22, Z
    1e1a:	71 81       	ldd	r23, Z+1	; 0x01
    1e1c:	82 81       	ldd	r24, Z+2	; 0x02
    1e1e:	93 81       	ldd	r25, Z+3	; 0x03
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	3f ef       	ldi	r19, 0xFF	; 255
    1e24:	4f e7       	ldi	r20, 0x7F	; 127
    1e26:	57 e4       	ldi	r21, 0x47	; 71
    1e28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e2c:	18 16       	cp	r1, r24
    1e2e:	64 f5       	brge	.+88     	; 0x1e88 <HCLCD_Init4Bit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e30:	fe 01       	movw	r30, r28
    1e32:	ed 5b       	subi	r30, 0xBD	; 189
    1e34:	ff 4f       	sbci	r31, 0xFF	; 255
    1e36:	60 81       	ld	r22, Z
    1e38:	71 81       	ldd	r23, Z+1	; 0x01
    1e3a:	82 81       	ldd	r24, Z+2	; 0x02
    1e3c:	93 81       	ldd	r25, Z+3	; 0x03
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	40 e2       	ldi	r20, 0x20	; 32
    1e44:	51 e4       	ldi	r21, 0x41	; 65
    1e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	bc 01       	movw	r22, r24
    1e50:	cd 01       	movw	r24, r26
    1e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	9e af       	std	Y+62, r25	; 0x3e
    1e5c:	8d af       	std	Y+61, r24	; 0x3d
    1e5e:	0f c0       	rjmp	.+30     	; 0x1e7e <HCLCD_Init4Bit+0xee>
    1e60:	80 e9       	ldi	r24, 0x90	; 144
    1e62:	91 e0       	ldi	r25, 0x01	; 1
    1e64:	9c af       	std	Y+60, r25	; 0x3c
    1e66:	8b af       	std	Y+59, r24	; 0x3b
    1e68:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e6a:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e6c:	01 97       	sbiw	r24, 0x01	; 1
    1e6e:	f1 f7       	brne	.-4      	; 0x1e6c <HCLCD_Init4Bit+0xdc>
    1e70:	9c af       	std	Y+60, r25	; 0x3c
    1e72:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e74:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e76:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	9e af       	std	Y+62, r25	; 0x3e
    1e7c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e7e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e80:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e82:	00 97       	sbiw	r24, 0x00	; 0
    1e84:	69 f7       	brne	.-38     	; 0x1e60 <HCLCD_Init4Bit+0xd0>
    1e86:	16 c0       	rjmp	.+44     	; 0x1eb4 <HCLCD_Init4Bit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e88:	fe 01       	movw	r30, r28
    1e8a:	ff 96       	adiw	r30, 0x3f	; 63
    1e8c:	60 81       	ld	r22, Z
    1e8e:	71 81       	ldd	r23, Z+1	; 0x01
    1e90:	82 81       	ldd	r24, Z+2	; 0x02
    1e92:	93 81       	ldd	r25, Z+3	; 0x03
    1e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	9e af       	std	Y+62, r25	; 0x3e
    1e9e:	8d af       	std	Y+61, r24	; 0x3d
    1ea0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ea2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ea4:	9a af       	std	Y+58, r25	; 0x3a
    1ea6:	89 af       	std	Y+57, r24	; 0x39
    1ea8:	89 ad       	ldd	r24, Y+57	; 0x39
    1eaa:	9a ad       	ldd	r25, Y+58	; 0x3a
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	f1 f7       	brne	.-4      	; 0x1eac <HCLCD_Init4Bit+0x11c>
    1eb0:	9a af       	std	Y+58, r25	; 0x3a
    1eb2:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(30);

	u8 Loc_u8Counter=0;
    1eb4:	fe 01       	movw	r30, r28
    1eb6:	e9 5b       	subi	r30, 0xB9	; 185
    1eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eba:	10 82       	st	Z, r1

	//Set Direction of Data the used pins
	for(Loc_u8Counter=HCLCD_PIN_START;Loc_u8Counter<(HCLCD_PIN_START+4);Loc_u8Counter++)
    1ebc:	fe 01       	movw	r30, r28
    1ebe:	e9 5b       	subi	r30, 0xB9	; 185
    1ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec2:	84 e0       	ldi	r24, 0x04	; 4
    1ec4:	80 83       	st	Z, r24
    1ec6:	11 c0       	rjmp	.+34     	; 0x1eea <HCLCD_Init4Bit+0x15a>
	{
		MDIO_SetPinDirection(DATA_PORT, PinOutput, Loc_u8Counter);
    1ec8:	fe 01       	movw	r30, r28
    1eca:	e9 5b       	subi	r30, 0xB9	; 185
    1ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ece:	80 e0       	ldi	r24, 0x00	; 0
    1ed0:	61 e0       	ldi	r22, 0x01	; 1
    1ed2:	40 81       	ld	r20, Z
    1ed4:	0e 94 80 0a 	call	0x1500	; 0x1500 <MDIO_SetPinDirection>
	_delay_ms(30);

	u8 Loc_u8Counter=0;

	//Set Direction of Data the used pins
	for(Loc_u8Counter=HCLCD_PIN_START;Loc_u8Counter<(HCLCD_PIN_START+4);Loc_u8Counter++)
    1ed8:	de 01       	movw	r26, r28
    1eda:	a9 5b       	subi	r26, 0xB9	; 185
    1edc:	bf 4f       	sbci	r27, 0xFF	; 255
    1ede:	fe 01       	movw	r30, r28
    1ee0:	e9 5b       	subi	r30, 0xB9	; 185
    1ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee4:	80 81       	ld	r24, Z
    1ee6:	8f 5f       	subi	r24, 0xFF	; 255
    1ee8:	8c 93       	st	X, r24
    1eea:	fe 01       	movw	r30, r28
    1eec:	e9 5b       	subi	r30, 0xB9	; 185
    1eee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef0:	80 81       	ld	r24, Z
    1ef2:	88 30       	cpi	r24, 0x08	; 8
    1ef4:	48 f3       	brcs	.-46     	; 0x1ec8 <HCLCD_Init4Bit+0x138>
	{
		MDIO_SetPinDirection(DATA_PORT, PinOutput, Loc_u8Counter);
	}

	//Set Direction of the Control Pins
	MDIO_SetPinDirection(CONTROL_PORT, PinOutput, RS);
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	61 e0       	ldi	r22, 0x01	; 1
    1efa:	41 e0       	ldi	r20, 0x01	; 1
    1efc:	0e 94 80 0a 	call	0x1500	; 0x1500 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(CONTROL_PORT, PinOutput, RW);
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	61 e0       	ldi	r22, 0x01	; 1
    1f04:	42 e0       	ldi	r20, 0x02	; 2
    1f06:	0e 94 80 0a 	call	0x1500	; 0x1500 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(CONTROL_PORT, PinOutput, E);
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	61 e0       	ldi	r22, 0x01	; 1
    1f0e:	43 e0       	ldi	r20, 0x03	; 3
    1f10:	0e 94 80 0a 	call	0x1500	; 0x1500 <MDIO_SetPinDirection>
	 */
	//Send Function Set Command

	//1-Sending High Nibble of the Function Set Command

	MDIO_SetNibbleValue(HCLCD_PIN_START,DATA_PORT,FUNCTION_SET_MODE_COMMAND>>4);
    1f14:	84 e0       	ldi	r24, 0x04	; 4
    1f16:	60 e0       	ldi	r22, 0x00	; 0
    1f18:	42 e0       	ldi	r20, 0x02	; 2
    1f1a:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <MDIO_SetNibbleValue>

	//Send the Falling Edge
	MDIO_SetPinValue(CONTROL_PORT, E, PinHigh);
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	63 e0       	ldi	r22, 0x03	; 3
    1f22:	41 e0       	ldi	r20, 0x01	; 1
    1f24:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <MDIO_SetPinValue>
    1f28:	80 e0       	ldi	r24, 0x00	; 0
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	a0 e0       	ldi	r26, 0x00	; 0
    1f2e:	b0 e4       	ldi	r27, 0x40	; 64
    1f30:	8d ab       	std	Y+53, r24	; 0x35
    1f32:	9e ab       	std	Y+54, r25	; 0x36
    1f34:	af ab       	std	Y+55, r26	; 0x37
    1f36:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f38:	6d a9       	ldd	r22, Y+53	; 0x35
    1f3a:	7e a9       	ldd	r23, Y+54	; 0x36
    1f3c:	8f a9       	ldd	r24, Y+55	; 0x37
    1f3e:	98 ad       	ldd	r25, Y+56	; 0x38
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	4a e7       	ldi	r20, 0x7A	; 122
    1f46:	55 e4       	ldi	r21, 0x45	; 69
    1f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	89 ab       	std	Y+49, r24	; 0x31
    1f52:	9a ab       	std	Y+50, r25	; 0x32
    1f54:	ab ab       	std	Y+51, r26	; 0x33
    1f56:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f58:	69 a9       	ldd	r22, Y+49	; 0x31
    1f5a:	7a a9       	ldd	r23, Y+50	; 0x32
    1f5c:	8b a9       	ldd	r24, Y+51	; 0x33
    1f5e:	9c a9       	ldd	r25, Y+52	; 0x34
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	40 e8       	ldi	r20, 0x80	; 128
    1f66:	5f e3       	ldi	r21, 0x3F	; 63
    1f68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f6c:	88 23       	and	r24, r24
    1f6e:	2c f4       	brge	.+10     	; 0x1f7a <HCLCD_Init4Bit+0x1ea>
		__ticks = 1;
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	98 ab       	std	Y+48, r25	; 0x30
    1f76:	8f a7       	std	Y+47, r24	; 0x2f
    1f78:	3f c0       	rjmp	.+126    	; 0x1ff8 <HCLCD_Init4Bit+0x268>
	else if (__tmp > 65535)
    1f7a:	69 a9       	ldd	r22, Y+49	; 0x31
    1f7c:	7a a9       	ldd	r23, Y+50	; 0x32
    1f7e:	8b a9       	ldd	r24, Y+51	; 0x33
    1f80:	9c a9       	ldd	r25, Y+52	; 0x34
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	3f ef       	ldi	r19, 0xFF	; 255
    1f86:	4f e7       	ldi	r20, 0x7F	; 127
    1f88:	57 e4       	ldi	r21, 0x47	; 71
    1f8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f8e:	18 16       	cp	r1, r24
    1f90:	4c f5       	brge	.+82     	; 0x1fe4 <HCLCD_Init4Bit+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f92:	6d a9       	ldd	r22, Y+53	; 0x35
    1f94:	7e a9       	ldd	r23, Y+54	; 0x36
    1f96:	8f a9       	ldd	r24, Y+55	; 0x37
    1f98:	98 ad       	ldd	r25, Y+56	; 0x38
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	40 e2       	ldi	r20, 0x20	; 32
    1fa0:	51 e4       	ldi	r21, 0x41	; 65
    1fa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	bc 01       	movw	r22, r24
    1fac:	cd 01       	movw	r24, r26
    1fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	98 ab       	std	Y+48, r25	; 0x30
    1fb8:	8f a7       	std	Y+47, r24	; 0x2f
    1fba:	0f c0       	rjmp	.+30     	; 0x1fda <HCLCD_Init4Bit+0x24a>
    1fbc:	80 e9       	ldi	r24, 0x90	; 144
    1fbe:	91 e0       	ldi	r25, 0x01	; 1
    1fc0:	9e a7       	std	Y+46, r25	; 0x2e
    1fc2:	8d a7       	std	Y+45, r24	; 0x2d
    1fc4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fc6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	f1 f7       	brne	.-4      	; 0x1fc8 <HCLCD_Init4Bit+0x238>
    1fcc:	9e a7       	std	Y+46, r25	; 0x2e
    1fce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fd2:	98 a9       	ldd	r25, Y+48	; 0x30
    1fd4:	01 97       	sbiw	r24, 0x01	; 1
    1fd6:	98 ab       	std	Y+48, r25	; 0x30
    1fd8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fda:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fdc:	98 a9       	ldd	r25, Y+48	; 0x30
    1fde:	00 97       	sbiw	r24, 0x00	; 0
    1fe0:	69 f7       	brne	.-38     	; 0x1fbc <HCLCD_Init4Bit+0x22c>
    1fe2:	14 c0       	rjmp	.+40     	; 0x200c <HCLCD_Init4Bit+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe4:	69 a9       	ldd	r22, Y+49	; 0x31
    1fe6:	7a a9       	ldd	r23, Y+50	; 0x32
    1fe8:	8b a9       	ldd	r24, Y+51	; 0x33
    1fea:	9c a9       	ldd	r25, Y+52	; 0x34
    1fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	98 ab       	std	Y+48, r25	; 0x30
    1ff6:	8f a7       	std	Y+47, r24	; 0x2f
    1ff8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ffa:	98 a9       	ldd	r25, Y+48	; 0x30
    1ffc:	9c a7       	std	Y+44, r25	; 0x2c
    1ffe:	8b a7       	std	Y+43, r24	; 0x2b
    2000:	8b a5       	ldd	r24, Y+43	; 0x2b
    2002:	9c a5       	ldd	r25, Y+44	; 0x2c
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	f1 f7       	brne	.-4      	; 0x2004 <HCLCD_Init4Bit+0x274>
    2008:	9c a7       	std	Y+44, r25	; 0x2c
    200a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	MDIO_SetPinValue(CONTROL_PORT, E, PinLow);
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	63 e0       	ldi	r22, 0x03	; 3
    2010:	40 e0       	ldi	r20, 0x00	; 0
    2012:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <MDIO_SetPinValue>


	//2-Sending Function Set Command

	HCLCD_WriteCommand4Bit(FUNCTION_SET_MODE_COMMAND);
    2016:	88 e2       	ldi	r24, 0x28	; 40
    2018:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <HCLCD_WriteCommand4Bit>
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	a0 e8       	ldi	r26, 0x80	; 128
    2022:	bf e3       	ldi	r27, 0x3F	; 63
    2024:	8f a3       	std	Y+39, r24	; 0x27
    2026:	98 a7       	std	Y+40, r25	; 0x28
    2028:	a9 a7       	std	Y+41, r26	; 0x29
    202a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    202c:	6f a1       	ldd	r22, Y+39	; 0x27
    202e:	78 a5       	ldd	r23, Y+40	; 0x28
    2030:	89 a5       	ldd	r24, Y+41	; 0x29
    2032:	9a a5       	ldd	r25, Y+42	; 0x2a
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	4a e7       	ldi	r20, 0x7A	; 122
    203a:	55 e4       	ldi	r21, 0x45	; 69
    203c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	8b a3       	std	Y+35, r24	; 0x23
    2046:	9c a3       	std	Y+36, r25	; 0x24
    2048:	ad a3       	std	Y+37, r26	; 0x25
    204a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    204c:	6b a1       	ldd	r22, Y+35	; 0x23
    204e:	7c a1       	ldd	r23, Y+36	; 0x24
    2050:	8d a1       	ldd	r24, Y+37	; 0x25
    2052:	9e a1       	ldd	r25, Y+38	; 0x26
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	40 e8       	ldi	r20, 0x80	; 128
    205a:	5f e3       	ldi	r21, 0x3F	; 63
    205c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2060:	88 23       	and	r24, r24
    2062:	2c f4       	brge	.+10     	; 0x206e <HCLCD_Init4Bit+0x2de>
		__ticks = 1;
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	9a a3       	std	Y+34, r25	; 0x22
    206a:	89 a3       	std	Y+33, r24	; 0x21
    206c:	3f c0       	rjmp	.+126    	; 0x20ec <HCLCD_Init4Bit+0x35c>
	else if (__tmp > 65535)
    206e:	6b a1       	ldd	r22, Y+35	; 0x23
    2070:	7c a1       	ldd	r23, Y+36	; 0x24
    2072:	8d a1       	ldd	r24, Y+37	; 0x25
    2074:	9e a1       	ldd	r25, Y+38	; 0x26
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	3f ef       	ldi	r19, 0xFF	; 255
    207a:	4f e7       	ldi	r20, 0x7F	; 127
    207c:	57 e4       	ldi	r21, 0x47	; 71
    207e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2082:	18 16       	cp	r1, r24
    2084:	4c f5       	brge	.+82     	; 0x20d8 <HCLCD_Init4Bit+0x348>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2086:	6f a1       	ldd	r22, Y+39	; 0x27
    2088:	78 a5       	ldd	r23, Y+40	; 0x28
    208a:	89 a5       	ldd	r24, Y+41	; 0x29
    208c:	9a a5       	ldd	r25, Y+42	; 0x2a
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	40 e2       	ldi	r20, 0x20	; 32
    2094:	51 e4       	ldi	r21, 0x41	; 65
    2096:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	bc 01       	movw	r22, r24
    20a0:	cd 01       	movw	r24, r26
    20a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	9a a3       	std	Y+34, r25	; 0x22
    20ac:	89 a3       	std	Y+33, r24	; 0x21
    20ae:	0f c0       	rjmp	.+30     	; 0x20ce <HCLCD_Init4Bit+0x33e>
    20b0:	80 e9       	ldi	r24, 0x90	; 144
    20b2:	91 e0       	ldi	r25, 0x01	; 1
    20b4:	98 a3       	std	Y+32, r25	; 0x20
    20b6:	8f 8f       	std	Y+31, r24	; 0x1f
    20b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20ba:	98 a1       	ldd	r25, Y+32	; 0x20
    20bc:	01 97       	sbiw	r24, 0x01	; 1
    20be:	f1 f7       	brne	.-4      	; 0x20bc <HCLCD_Init4Bit+0x32c>
    20c0:	98 a3       	std	Y+32, r25	; 0x20
    20c2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c4:	89 a1       	ldd	r24, Y+33	; 0x21
    20c6:	9a a1       	ldd	r25, Y+34	; 0x22
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	9a a3       	std	Y+34, r25	; 0x22
    20cc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ce:	89 a1       	ldd	r24, Y+33	; 0x21
    20d0:	9a a1       	ldd	r25, Y+34	; 0x22
    20d2:	00 97       	sbiw	r24, 0x00	; 0
    20d4:	69 f7       	brne	.-38     	; 0x20b0 <HCLCD_Init4Bit+0x320>
    20d6:	14 c0       	rjmp	.+40     	; 0x2100 <HCLCD_Init4Bit+0x370>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d8:	6b a1       	ldd	r22, Y+35	; 0x23
    20da:	7c a1       	ldd	r23, Y+36	; 0x24
    20dc:	8d a1       	ldd	r24, Y+37	; 0x25
    20de:	9e a1       	ldd	r25, Y+38	; 0x26
    20e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e4:	dc 01       	movw	r26, r24
    20e6:	cb 01       	movw	r24, r22
    20e8:	9a a3       	std	Y+34, r25	; 0x22
    20ea:	89 a3       	std	Y+33, r24	; 0x21
    20ec:	89 a1       	ldd	r24, Y+33	; 0x21
    20ee:	9a a1       	ldd	r25, Y+34	; 0x22
    20f0:	9e 8f       	std	Y+30, r25	; 0x1e
    20f2:	8d 8f       	std	Y+29, r24	; 0x1d
    20f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	f1 f7       	brne	.-4      	; 0x20f8 <HCLCD_Init4Bit+0x368>
    20fc:	9e 8f       	std	Y+30, r25	; 0x1e
    20fe:	8d 8f       	std	Y+29, r24	; 0x1d

	//Send Display On/Off command
	_delay_ms(1);
	HCLCD_WriteCommand4Bit(DISPALY_ON_OFF_COMMAND);
    2100:	8f e0       	ldi	r24, 0x0F	; 15
    2102:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <HCLCD_WriteCommand4Bit>
    2106:	80 e0       	ldi	r24, 0x00	; 0
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	a0 e8       	ldi	r26, 0x80	; 128
    210c:	bf e3       	ldi	r27, 0x3F	; 63
    210e:	89 8f       	std	Y+25, r24	; 0x19
    2110:	9a 8f       	std	Y+26, r25	; 0x1a
    2112:	ab 8f       	std	Y+27, r26	; 0x1b
    2114:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2116:	69 8d       	ldd	r22, Y+25	; 0x19
    2118:	7a 8d       	ldd	r23, Y+26	; 0x1a
    211a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    211c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	4a e7       	ldi	r20, 0x7A	; 122
    2124:	55 e4       	ldi	r21, 0x45	; 69
    2126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	8d 8b       	std	Y+21, r24	; 0x15
    2130:	9e 8b       	std	Y+22, r25	; 0x16
    2132:	af 8b       	std	Y+23, r26	; 0x17
    2134:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2136:	6d 89       	ldd	r22, Y+21	; 0x15
    2138:	7e 89       	ldd	r23, Y+22	; 0x16
    213a:	8f 89       	ldd	r24, Y+23	; 0x17
    213c:	98 8d       	ldd	r25, Y+24	; 0x18
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	40 e8       	ldi	r20, 0x80	; 128
    2144:	5f e3       	ldi	r21, 0x3F	; 63
    2146:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    214a:	88 23       	and	r24, r24
    214c:	2c f4       	brge	.+10     	; 0x2158 <HCLCD_Init4Bit+0x3c8>
		__ticks = 1;
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	9c 8b       	std	Y+20, r25	; 0x14
    2154:	8b 8b       	std	Y+19, r24	; 0x13
    2156:	3f c0       	rjmp	.+126    	; 0x21d6 <HCLCD_Init4Bit+0x446>
	else if (__tmp > 65535)
    2158:	6d 89       	ldd	r22, Y+21	; 0x15
    215a:	7e 89       	ldd	r23, Y+22	; 0x16
    215c:	8f 89       	ldd	r24, Y+23	; 0x17
    215e:	98 8d       	ldd	r25, Y+24	; 0x18
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	3f ef       	ldi	r19, 0xFF	; 255
    2164:	4f e7       	ldi	r20, 0x7F	; 127
    2166:	57 e4       	ldi	r21, 0x47	; 71
    2168:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    216c:	18 16       	cp	r1, r24
    216e:	4c f5       	brge	.+82     	; 0x21c2 <HCLCD_Init4Bit+0x432>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2170:	69 8d       	ldd	r22, Y+25	; 0x19
    2172:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2174:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2176:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	40 e2       	ldi	r20, 0x20	; 32
    217e:	51 e4       	ldi	r21, 0x41	; 65
    2180:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	bc 01       	movw	r22, r24
    218a:	cd 01       	movw	r24, r26
    218c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	9c 8b       	std	Y+20, r25	; 0x14
    2196:	8b 8b       	std	Y+19, r24	; 0x13
    2198:	0f c0       	rjmp	.+30     	; 0x21b8 <HCLCD_Init4Bit+0x428>
    219a:	80 e9       	ldi	r24, 0x90	; 144
    219c:	91 e0       	ldi	r25, 0x01	; 1
    219e:	9a 8b       	std	Y+18, r25	; 0x12
    21a0:	89 8b       	std	Y+17, r24	; 0x11
    21a2:	89 89       	ldd	r24, Y+17	; 0x11
    21a4:	9a 89       	ldd	r25, Y+18	; 0x12
    21a6:	01 97       	sbiw	r24, 0x01	; 1
    21a8:	f1 f7       	brne	.-4      	; 0x21a6 <HCLCD_Init4Bit+0x416>
    21aa:	9a 8b       	std	Y+18, r25	; 0x12
    21ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ae:	8b 89       	ldd	r24, Y+19	; 0x13
    21b0:	9c 89       	ldd	r25, Y+20	; 0x14
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	9c 8b       	std	Y+20, r25	; 0x14
    21b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b8:	8b 89       	ldd	r24, Y+19	; 0x13
    21ba:	9c 89       	ldd	r25, Y+20	; 0x14
    21bc:	00 97       	sbiw	r24, 0x00	; 0
    21be:	69 f7       	brne	.-38     	; 0x219a <HCLCD_Init4Bit+0x40a>
    21c0:	14 c0       	rjmp	.+40     	; 0x21ea <HCLCD_Init4Bit+0x45a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c2:	6d 89       	ldd	r22, Y+21	; 0x15
    21c4:	7e 89       	ldd	r23, Y+22	; 0x16
    21c6:	8f 89       	ldd	r24, Y+23	; 0x17
    21c8:	98 8d       	ldd	r25, Y+24	; 0x18
    21ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	9c 8b       	std	Y+20, r25	; 0x14
    21d4:	8b 8b       	std	Y+19, r24	; 0x13
    21d6:	8b 89       	ldd	r24, Y+19	; 0x13
    21d8:	9c 89       	ldd	r25, Y+20	; 0x14
    21da:	98 8b       	std	Y+16, r25	; 0x10
    21dc:	8f 87       	std	Y+15, r24	; 0x0f
    21de:	8f 85       	ldd	r24, Y+15	; 0x0f
    21e0:	98 89       	ldd	r25, Y+16	; 0x10
    21e2:	01 97       	sbiw	r24, 0x01	; 1
    21e4:	f1 f7       	brne	.-4      	; 0x21e2 <HCLCD_Init4Bit+0x452>
    21e6:	98 8b       	std	Y+16, r25	; 0x10
    21e8:	8f 87       	std	Y+15, r24	; 0x0f

	//Display Clear Mode
	_delay_ms(1);
	HCLCD_WriteCommand4Bit(DISPALY_ClEAR_COMMAND);
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <HCLCD_WriteCommand4Bit>
    21f0:	80 e0       	ldi	r24, 0x00	; 0
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	a0 e0       	ldi	r26, 0x00	; 0
    21f6:	b0 e4       	ldi	r27, 0x40	; 64
    21f8:	8b 87       	std	Y+11, r24	; 0x0b
    21fa:	9c 87       	std	Y+12, r25	; 0x0c
    21fc:	ad 87       	std	Y+13, r26	; 0x0d
    21fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2200:	6b 85       	ldd	r22, Y+11	; 0x0b
    2202:	7c 85       	ldd	r23, Y+12	; 0x0c
    2204:	8d 85       	ldd	r24, Y+13	; 0x0d
    2206:	9e 85       	ldd	r25, Y+14	; 0x0e
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	4a e7       	ldi	r20, 0x7A	; 122
    220e:	55 e4       	ldi	r21, 0x45	; 69
    2210:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	8f 83       	std	Y+7, r24	; 0x07
    221a:	98 87       	std	Y+8, r25	; 0x08
    221c:	a9 87       	std	Y+9, r26	; 0x09
    221e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2220:	6f 81       	ldd	r22, Y+7	; 0x07
    2222:	78 85       	ldd	r23, Y+8	; 0x08
    2224:	89 85       	ldd	r24, Y+9	; 0x09
    2226:	9a 85       	ldd	r25, Y+10	; 0x0a
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	40 e8       	ldi	r20, 0x80	; 128
    222e:	5f e3       	ldi	r21, 0x3F	; 63
    2230:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2234:	88 23       	and	r24, r24
    2236:	2c f4       	brge	.+10     	; 0x2242 <HCLCD_Init4Bit+0x4b2>
		__ticks = 1;
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	9e 83       	std	Y+6, r25	; 0x06
    223e:	8d 83       	std	Y+5, r24	; 0x05
    2240:	3f c0       	rjmp	.+126    	; 0x22c0 <HCLCD_Init4Bit+0x530>
	else if (__tmp > 65535)
    2242:	6f 81       	ldd	r22, Y+7	; 0x07
    2244:	78 85       	ldd	r23, Y+8	; 0x08
    2246:	89 85       	ldd	r24, Y+9	; 0x09
    2248:	9a 85       	ldd	r25, Y+10	; 0x0a
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	3f ef       	ldi	r19, 0xFF	; 255
    224e:	4f e7       	ldi	r20, 0x7F	; 127
    2250:	57 e4       	ldi	r21, 0x47	; 71
    2252:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2256:	18 16       	cp	r1, r24
    2258:	4c f5       	brge	.+82     	; 0x22ac <HCLCD_Init4Bit+0x51c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    225a:	6b 85       	ldd	r22, Y+11	; 0x0b
    225c:	7c 85       	ldd	r23, Y+12	; 0x0c
    225e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2260:	9e 85       	ldd	r25, Y+14	; 0x0e
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	40 e2       	ldi	r20, 0x20	; 32
    2268:	51 e4       	ldi	r21, 0x41	; 65
    226a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	bc 01       	movw	r22, r24
    2274:	cd 01       	movw	r24, r26
    2276:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	9e 83       	std	Y+6, r25	; 0x06
    2280:	8d 83       	std	Y+5, r24	; 0x05
    2282:	0f c0       	rjmp	.+30     	; 0x22a2 <HCLCD_Init4Bit+0x512>
    2284:	80 e9       	ldi	r24, 0x90	; 144
    2286:	91 e0       	ldi	r25, 0x01	; 1
    2288:	9c 83       	std	Y+4, r25	; 0x04
    228a:	8b 83       	std	Y+3, r24	; 0x03
    228c:	8b 81       	ldd	r24, Y+3	; 0x03
    228e:	9c 81       	ldd	r25, Y+4	; 0x04
    2290:	01 97       	sbiw	r24, 0x01	; 1
    2292:	f1 f7       	brne	.-4      	; 0x2290 <HCLCD_Init4Bit+0x500>
    2294:	9c 83       	std	Y+4, r25	; 0x04
    2296:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2298:	8d 81       	ldd	r24, Y+5	; 0x05
    229a:	9e 81       	ldd	r25, Y+6	; 0x06
    229c:	01 97       	sbiw	r24, 0x01	; 1
    229e:	9e 83       	std	Y+6, r25	; 0x06
    22a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a2:	8d 81       	ldd	r24, Y+5	; 0x05
    22a4:	9e 81       	ldd	r25, Y+6	; 0x06
    22a6:	00 97       	sbiw	r24, 0x00	; 0
    22a8:	69 f7       	brne	.-38     	; 0x2284 <HCLCD_Init4Bit+0x4f4>
    22aa:	14 c0       	rjmp	.+40     	; 0x22d4 <HCLCD_Init4Bit+0x544>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ac:	6f 81       	ldd	r22, Y+7	; 0x07
    22ae:	78 85       	ldd	r23, Y+8	; 0x08
    22b0:	89 85       	ldd	r24, Y+9	; 0x09
    22b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	9e 83       	std	Y+6, r25	; 0x06
    22be:	8d 83       	std	Y+5, r24	; 0x05
    22c0:	8d 81       	ldd	r24, Y+5	; 0x05
    22c2:	9e 81       	ldd	r25, Y+6	; 0x06
    22c4:	9a 83       	std	Y+2, r25	; 0x02
    22c6:	89 83       	std	Y+1, r24	; 0x01
    22c8:	89 81       	ldd	r24, Y+1	; 0x01
    22ca:	9a 81       	ldd	r25, Y+2	; 0x02
    22cc:	01 97       	sbiw	r24, 0x01	; 1
    22ce:	f1 f7       	brne	.-4      	; 0x22cc <HCLCD_Init4Bit+0x53c>
    22d0:	9a 83       	std	Y+2, r25	; 0x02
    22d2:	89 83       	std	Y+1, r24	; 0x01

	//Entry Mode
	_delay_ms(2);
	HCLCD_WriteCommand4Bit(ENTRY_MODE_COMMAND);
    22d4:	86 e0       	ldi	r24, 0x06	; 6
    22d6:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <HCLCD_WriteCommand4Bit>
}
    22da:	c9 5b       	subi	r28, 0xB9	; 185
    22dc:	df 4f       	sbci	r29, 0xFF	; 255
    22de:	0f b6       	in	r0, 0x3f	; 63
    22e0:	f8 94       	cli
    22e2:	de bf       	out	0x3e, r29	; 62
    22e4:	0f be       	out	0x3f, r0	; 63
    22e6:	cd bf       	out	0x3d, r28	; 61
    22e8:	cf 91       	pop	r28
    22ea:	df 91       	pop	r29
    22ec:	1f 91       	pop	r17
    22ee:	0f 91       	pop	r16
    22f0:	08 95       	ret

000022f2 <HCLCD_WriteChar4Bit>:

void HCLCD_WriteChar4Bit(u8 Copy_u8Data)
{
    22f2:	df 93       	push	r29
    22f4:	cf 93       	push	r28
    22f6:	cd b7       	in	r28, 0x3d	; 61
    22f8:	de b7       	in	r29, 0x3e	; 62
    22fa:	6d 97       	sbiw	r28, 0x1d	; 29
    22fc:	0f b6       	in	r0, 0x3f	; 63
    22fe:	f8 94       	cli
    2300:	de bf       	out	0x3e, r29	; 62
    2302:	0f be       	out	0x3f, r0	; 63
    2304:	cd bf       	out	0x3d, r28	; 61
    2306:	8d 8f       	std	Y+29, r24	; 0x1d
	//Set RW to Zero
	MDIO_SetPinValue(CONTROL_PORT, RW, PinLow);
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	62 e0       	ldi	r22, 0x02	; 2
    230c:	40 e0       	ldi	r20, 0x00	; 0
    230e:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <MDIO_SetPinValue>

	//Set RS to One ==> to indicate a Data
	MDIO_SetPinValue(CONTROL_PORT, RS, PinHigh);
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	61 e0       	ldi	r22, 0x01	; 1
    2316:	41 e0       	ldi	r20, 0x01	; 1
    2318:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <MDIO_SetPinValue>

	//Set High Nibble Value of the Command
	MDIO_SetNibbleValue(HCLCD_PIN_START,DATA_PORT,Copy_u8Data>>4);
    231c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    231e:	98 2f       	mov	r25, r24
    2320:	92 95       	swap	r25
    2322:	9f 70       	andi	r25, 0x0F	; 15
    2324:	84 e0       	ldi	r24, 0x04	; 4
    2326:	60 e0       	ldi	r22, 0x00	; 0
    2328:	49 2f       	mov	r20, r25
    232a:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <MDIO_SetNibbleValue>

	//Send the Falling Edge
	MDIO_SetPinValue(CONTROL_PORT, E, PinHigh);
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	63 e0       	ldi	r22, 0x03	; 3
    2332:	41 e0       	ldi	r20, 0x01	; 1
    2334:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <MDIO_SetPinValue>
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	a0 e0       	ldi	r26, 0x00	; 0
    233e:	b0 e4       	ldi	r27, 0x40	; 64
    2340:	89 8f       	std	Y+25, r24	; 0x19
    2342:	9a 8f       	std	Y+26, r25	; 0x1a
    2344:	ab 8f       	std	Y+27, r26	; 0x1b
    2346:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2348:	69 8d       	ldd	r22, Y+25	; 0x19
    234a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    234c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    234e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	4a e7       	ldi	r20, 0x7A	; 122
    2356:	55 e4       	ldi	r21, 0x45	; 69
    2358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	8d 8b       	std	Y+21, r24	; 0x15
    2362:	9e 8b       	std	Y+22, r25	; 0x16
    2364:	af 8b       	std	Y+23, r26	; 0x17
    2366:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2368:	6d 89       	ldd	r22, Y+21	; 0x15
    236a:	7e 89       	ldd	r23, Y+22	; 0x16
    236c:	8f 89       	ldd	r24, Y+23	; 0x17
    236e:	98 8d       	ldd	r25, Y+24	; 0x18
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	40 e8       	ldi	r20, 0x80	; 128
    2376:	5f e3       	ldi	r21, 0x3F	; 63
    2378:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    237c:	88 23       	and	r24, r24
    237e:	2c f4       	brge	.+10     	; 0x238a <HCLCD_WriteChar4Bit+0x98>
		__ticks = 1;
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	9c 8b       	std	Y+20, r25	; 0x14
    2386:	8b 8b       	std	Y+19, r24	; 0x13
    2388:	3f c0       	rjmp	.+126    	; 0x2408 <HCLCD_WriteChar4Bit+0x116>
	else if (__tmp > 65535)
    238a:	6d 89       	ldd	r22, Y+21	; 0x15
    238c:	7e 89       	ldd	r23, Y+22	; 0x16
    238e:	8f 89       	ldd	r24, Y+23	; 0x17
    2390:	98 8d       	ldd	r25, Y+24	; 0x18
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	3f ef       	ldi	r19, 0xFF	; 255
    2396:	4f e7       	ldi	r20, 0x7F	; 127
    2398:	57 e4       	ldi	r21, 0x47	; 71
    239a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    239e:	18 16       	cp	r1, r24
    23a0:	4c f5       	brge	.+82     	; 0x23f4 <HCLCD_WriteChar4Bit+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a2:	69 8d       	ldd	r22, Y+25	; 0x19
    23a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	40 e2       	ldi	r20, 0x20	; 32
    23b0:	51 e4       	ldi	r21, 0x41	; 65
    23b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	bc 01       	movw	r22, r24
    23bc:	cd 01       	movw	r24, r26
    23be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	9c 8b       	std	Y+20, r25	; 0x14
    23c8:	8b 8b       	std	Y+19, r24	; 0x13
    23ca:	0f c0       	rjmp	.+30     	; 0x23ea <HCLCD_WriteChar4Bit+0xf8>
    23cc:	80 e9       	ldi	r24, 0x90	; 144
    23ce:	91 e0       	ldi	r25, 0x01	; 1
    23d0:	9a 8b       	std	Y+18, r25	; 0x12
    23d2:	89 8b       	std	Y+17, r24	; 0x11
    23d4:	89 89       	ldd	r24, Y+17	; 0x11
    23d6:	9a 89       	ldd	r25, Y+18	; 0x12
    23d8:	01 97       	sbiw	r24, 0x01	; 1
    23da:	f1 f7       	brne	.-4      	; 0x23d8 <HCLCD_WriteChar4Bit+0xe6>
    23dc:	9a 8b       	std	Y+18, r25	; 0x12
    23de:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e0:	8b 89       	ldd	r24, Y+19	; 0x13
    23e2:	9c 89       	ldd	r25, Y+20	; 0x14
    23e4:	01 97       	sbiw	r24, 0x01	; 1
    23e6:	9c 8b       	std	Y+20, r25	; 0x14
    23e8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ea:	8b 89       	ldd	r24, Y+19	; 0x13
    23ec:	9c 89       	ldd	r25, Y+20	; 0x14
    23ee:	00 97       	sbiw	r24, 0x00	; 0
    23f0:	69 f7       	brne	.-38     	; 0x23cc <HCLCD_WriteChar4Bit+0xda>
    23f2:	14 c0       	rjmp	.+40     	; 0x241c <HCLCD_WriteChar4Bit+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f4:	6d 89       	ldd	r22, Y+21	; 0x15
    23f6:	7e 89       	ldd	r23, Y+22	; 0x16
    23f8:	8f 89       	ldd	r24, Y+23	; 0x17
    23fa:	98 8d       	ldd	r25, Y+24	; 0x18
    23fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	9c 8b       	std	Y+20, r25	; 0x14
    2406:	8b 8b       	std	Y+19, r24	; 0x13
    2408:	8b 89       	ldd	r24, Y+19	; 0x13
    240a:	9c 89       	ldd	r25, Y+20	; 0x14
    240c:	98 8b       	std	Y+16, r25	; 0x10
    240e:	8f 87       	std	Y+15, r24	; 0x0f
    2410:	8f 85       	ldd	r24, Y+15	; 0x0f
    2412:	98 89       	ldd	r25, Y+16	; 0x10
    2414:	01 97       	sbiw	r24, 0x01	; 1
    2416:	f1 f7       	brne	.-4      	; 0x2414 <HCLCD_WriteChar4Bit+0x122>
    2418:	98 8b       	std	Y+16, r25	; 0x10
    241a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_SetPinValue(CONTROL_PORT, E, PinLow);
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	63 e0       	ldi	r22, 0x03	; 3
    2420:	40 e0       	ldi	r20, 0x00	; 0
    2422:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <MDIO_SetPinValue>

	//Send The Lower Nibble
MDIO_SetNibbleValue(HCLCD_PIN_START, DATA_PORT, Copy_u8Data);
    2426:	84 e0       	ldi	r24, 0x04	; 4
    2428:	60 e0       	ldi	r22, 0x00	; 0
    242a:	4d 8d       	ldd	r20, Y+29	; 0x1d
    242c:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <MDIO_SetNibbleValue>
	//Send the Falling Edge
	MDIO_SetPinValue(CONTROL_PORT, E, PinHigh);
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	63 e0       	ldi	r22, 0x03	; 3
    2434:	41 e0       	ldi	r20, 0x01	; 1
    2436:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <MDIO_SetPinValue>
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	a0 e0       	ldi	r26, 0x00	; 0
    2440:	b0 e4       	ldi	r27, 0x40	; 64
    2442:	8b 87       	std	Y+11, r24	; 0x0b
    2444:	9c 87       	std	Y+12, r25	; 0x0c
    2446:	ad 87       	std	Y+13, r26	; 0x0d
    2448:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    244a:	6b 85       	ldd	r22, Y+11	; 0x0b
    244c:	7c 85       	ldd	r23, Y+12	; 0x0c
    244e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2450:	9e 85       	ldd	r25, Y+14	; 0x0e
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	4a e7       	ldi	r20, 0x7A	; 122
    2458:	55 e4       	ldi	r21, 0x45	; 69
    245a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245e:	dc 01       	movw	r26, r24
    2460:	cb 01       	movw	r24, r22
    2462:	8f 83       	std	Y+7, r24	; 0x07
    2464:	98 87       	std	Y+8, r25	; 0x08
    2466:	a9 87       	std	Y+9, r26	; 0x09
    2468:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    246a:	6f 81       	ldd	r22, Y+7	; 0x07
    246c:	78 85       	ldd	r23, Y+8	; 0x08
    246e:	89 85       	ldd	r24, Y+9	; 0x09
    2470:	9a 85       	ldd	r25, Y+10	; 0x0a
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	40 e8       	ldi	r20, 0x80	; 128
    2478:	5f e3       	ldi	r21, 0x3F	; 63
    247a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    247e:	88 23       	and	r24, r24
    2480:	2c f4       	brge	.+10     	; 0x248c <HCLCD_WriteChar4Bit+0x19a>
		__ticks = 1;
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	9e 83       	std	Y+6, r25	; 0x06
    2488:	8d 83       	std	Y+5, r24	; 0x05
    248a:	3f c0       	rjmp	.+126    	; 0x250a <HCLCD_WriteChar4Bit+0x218>
	else if (__tmp > 65535)
    248c:	6f 81       	ldd	r22, Y+7	; 0x07
    248e:	78 85       	ldd	r23, Y+8	; 0x08
    2490:	89 85       	ldd	r24, Y+9	; 0x09
    2492:	9a 85       	ldd	r25, Y+10	; 0x0a
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	3f ef       	ldi	r19, 0xFF	; 255
    2498:	4f e7       	ldi	r20, 0x7F	; 127
    249a:	57 e4       	ldi	r21, 0x47	; 71
    249c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24a0:	18 16       	cp	r1, r24
    24a2:	4c f5       	brge	.+82     	; 0x24f6 <HCLCD_WriteChar4Bit+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    24a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    24a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	40 e2       	ldi	r20, 0x20	; 32
    24b2:	51 e4       	ldi	r21, 0x41	; 65
    24b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	bc 01       	movw	r22, r24
    24be:	cd 01       	movw	r24, r26
    24c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c4:	dc 01       	movw	r26, r24
    24c6:	cb 01       	movw	r24, r22
    24c8:	9e 83       	std	Y+6, r25	; 0x06
    24ca:	8d 83       	std	Y+5, r24	; 0x05
    24cc:	0f c0       	rjmp	.+30     	; 0x24ec <HCLCD_WriteChar4Bit+0x1fa>
    24ce:	80 e9       	ldi	r24, 0x90	; 144
    24d0:	91 e0       	ldi	r25, 0x01	; 1
    24d2:	9c 83       	std	Y+4, r25	; 0x04
    24d4:	8b 83       	std	Y+3, r24	; 0x03
    24d6:	8b 81       	ldd	r24, Y+3	; 0x03
    24d8:	9c 81       	ldd	r25, Y+4	; 0x04
    24da:	01 97       	sbiw	r24, 0x01	; 1
    24dc:	f1 f7       	brne	.-4      	; 0x24da <HCLCD_WriteChar4Bit+0x1e8>
    24de:	9c 83       	std	Y+4, r25	; 0x04
    24e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e2:	8d 81       	ldd	r24, Y+5	; 0x05
    24e4:	9e 81       	ldd	r25, Y+6	; 0x06
    24e6:	01 97       	sbiw	r24, 0x01	; 1
    24e8:	9e 83       	std	Y+6, r25	; 0x06
    24ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ec:	8d 81       	ldd	r24, Y+5	; 0x05
    24ee:	9e 81       	ldd	r25, Y+6	; 0x06
    24f0:	00 97       	sbiw	r24, 0x00	; 0
    24f2:	69 f7       	brne	.-38     	; 0x24ce <HCLCD_WriteChar4Bit+0x1dc>
    24f4:	14 c0       	rjmp	.+40     	; 0x251e <HCLCD_WriteChar4Bit+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f6:	6f 81       	ldd	r22, Y+7	; 0x07
    24f8:	78 85       	ldd	r23, Y+8	; 0x08
    24fa:	89 85       	ldd	r24, Y+9	; 0x09
    24fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    24fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	9e 83       	std	Y+6, r25	; 0x06
    2508:	8d 83       	std	Y+5, r24	; 0x05
    250a:	8d 81       	ldd	r24, Y+5	; 0x05
    250c:	9e 81       	ldd	r25, Y+6	; 0x06
    250e:	9a 83       	std	Y+2, r25	; 0x02
    2510:	89 83       	std	Y+1, r24	; 0x01
    2512:	89 81       	ldd	r24, Y+1	; 0x01
    2514:	9a 81       	ldd	r25, Y+2	; 0x02
    2516:	01 97       	sbiw	r24, 0x01	; 1
    2518:	f1 f7       	brne	.-4      	; 0x2516 <HCLCD_WriteChar4Bit+0x224>
    251a:	9a 83       	std	Y+2, r25	; 0x02
    251c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_SetPinValue(CONTROL_PORT, E, PinLow);
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	63 e0       	ldi	r22, 0x03	; 3
    2522:	40 e0       	ldi	r20, 0x00	; 0
    2524:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <MDIO_SetPinValue>
}
    2528:	6d 96       	adiw	r28, 0x1d	; 29
    252a:	0f b6       	in	r0, 0x3f	; 63
    252c:	f8 94       	cli
    252e:	de bf       	out	0x3e, r29	; 62
    2530:	0f be       	out	0x3f, r0	; 63
    2532:	cd bf       	out	0x3d, r28	; 61
    2534:	cf 91       	pop	r28
    2536:	df 91       	pop	r29
    2538:	08 95       	ret

0000253a <HCLCD_SetCursorPosition>:

void HCLCD_SetCursorPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    253a:	df 93       	push	r29
    253c:	cf 93       	push	r28
    253e:	00 d0       	rcall	.+0      	; 0x2540 <HCLCD_SetCursorPosition+0x6>
    2540:	cd b7       	in	r28, 0x3d	; 61
    2542:	de b7       	in	r29, 0x3e	; 62
    2544:	89 83       	std	Y+1, r24	; 0x01
    2546:	6a 83       	std	Y+2, r22	; 0x02
if((Copy_u8LineNumber==HCLCD_LINE_0)||(Copy_u8LineNumber==HCLCD_LINE_1))
    2548:	89 81       	ldd	r24, Y+1	; 0x01
    254a:	88 23       	and	r24, r24
    254c:	19 f0       	breq	.+6      	; 0x2554 <HCLCD_SetCursorPosition+0x1a>
    254e:	89 81       	ldd	r24, Y+1	; 0x01
    2550:	81 30       	cpi	r24, 0x01	; 1
    2552:	79 f4       	brne	.+30     	; 0x2572 <HCLCD_SetCursorPosition+0x38>
{
	if(Copy_u8PositionNumber<16)
    2554:	8a 81       	ldd	r24, Y+2	; 0x02
    2556:	80 31       	cpi	r24, 0x10	; 16
    2558:	60 f4       	brcc	.+24     	; 0x2572 <HCLCD_SetCursorPosition+0x38>
	{
		if(Copy_u8LineNumber==HCLCD_LINE_0)
    255a:	89 81       	ldd	r24, Y+1	; 0x01
    255c:	88 23       	and	r24, r24
    255e:	29 f4       	brne	.+10     	; 0x256a <HCLCD_SetCursorPosition+0x30>
		{
			HCLCD_WriteCommand4Bit(Copy_u8PositionNumber+HCLCD_LINE0_OFFSET);
    2560:	8a 81       	ldd	r24, Y+2	; 0x02
    2562:	80 58       	subi	r24, 0x80	; 128
    2564:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <HCLCD_WriteCommand4Bit>
    2568:	04 c0       	rjmp	.+8      	; 0x2572 <HCLCD_SetCursorPosition+0x38>
		}
		else
		{
			HCLCD_WriteCommand4Bit(Copy_u8PositionNumber+HCLCD_LINE1_OFFSET);
    256a:	8a 81       	ldd	r24, Y+2	; 0x02
    256c:	80 54       	subi	r24, 0x40	; 64
    256e:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <HCLCD_WriteCommand4Bit>
}
else
{
	//Wrong Line Chosen
}
}
    2572:	0f 90       	pop	r0
    2574:	0f 90       	pop	r0
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	08 95       	ret

0000257c <HLCD_WriteString4Bit>:
void HLCD_WriteString4Bit (u8 *ptr_u8String)
{ u8 loc_u8it =0;
    257c:	df 93       	push	r29
    257e:	cf 93       	push	r28
    2580:	cd b7       	in	r28, 0x3d	; 61
    2582:	de b7       	in	r29, 0x3e	; 62
    2584:	6f 97       	sbiw	r28, 0x1f	; 31
    2586:	0f b6       	in	r0, 0x3f	; 63
    2588:	f8 94       	cli
    258a:	de bf       	out	0x3e, r29	; 62
    258c:	0f be       	out	0x3f, r0	; 63
    258e:	cd bf       	out	0x3d, r28	; 61
    2590:	9f 8f       	std	Y+31, r25	; 0x1f
    2592:	8e 8f       	std	Y+30, r24	; 0x1e
    2594:	1d 8e       	std	Y+29, r1	; 0x1d
 for (loc_u8it=0;ptr_u8String[loc_u8it]!=Null;loc_u8it++)
    2596:	1d 8e       	std	Y+29, r1	; 0x1d
    2598:	24 c1       	rjmp	.+584    	; 0x27e2 <HLCD_WriteString4Bit+0x266>
 {
	 //set RS to 1 TO INDICATE a data
		MDIO_SetPinValue(CONTROL_PORT, RS, PinHigh);
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	61 e0       	ldi	r22, 0x01	; 1
    259e:	41 e0       	ldi	r20, 0x01	; 1
    25a0:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <MDIO_SetPinValue>

	 		//set RW TO 0
	 		MDIO_SetPinValue(CONTROL_PORT, RW, PinLow);
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	62 e0       	ldi	r22, 0x02	; 2
    25a8:	40 e0       	ldi	r20, 0x00	; 0
    25aa:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <MDIO_SetPinValue>

	 		// set high nibble value of the command
	 		MDIO_SetNibbleValue(HCLCD_PIN_START, DATA_PORT, ptr_u8String[loc_u8it] >>4);
    25ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25b0:	28 2f       	mov	r18, r24
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25b6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    25b8:	fc 01       	movw	r30, r24
    25ba:	e2 0f       	add	r30, r18
    25bc:	f3 1f       	adc	r31, r19
    25be:	80 81       	ld	r24, Z
    25c0:	98 2f       	mov	r25, r24
    25c2:	92 95       	swap	r25
    25c4:	9f 70       	andi	r25, 0x0F	; 15
    25c6:	84 e0       	ldi	r24, 0x04	; 4
    25c8:	60 e0       	ldi	r22, 0x00	; 0
    25ca:	49 2f       	mov	r20, r25
    25cc:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <MDIO_SetNibbleValue>
	 		//set falling edge
	 		MDIO_SetPinValue(CONTROL_PORT, E, PinHigh);
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	63 e0       	ldi	r22, 0x03	; 3
    25d4:	41 e0       	ldi	r20, 0x01	; 1
    25d6:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <MDIO_SetPinValue>
    25da:	80 e0       	ldi	r24, 0x00	; 0
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	a0 e0       	ldi	r26, 0x00	; 0
    25e0:	b0 e4       	ldi	r27, 0x40	; 64
    25e2:	89 8f       	std	Y+25, r24	; 0x19
    25e4:	9a 8f       	std	Y+26, r25	; 0x1a
    25e6:	ab 8f       	std	Y+27, r26	; 0x1b
    25e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ea:	69 8d       	ldd	r22, Y+25	; 0x19
    25ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	4a e7       	ldi	r20, 0x7A	; 122
    25f8:	55 e4       	ldi	r21, 0x45	; 69
    25fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25fe:	dc 01       	movw	r26, r24
    2600:	cb 01       	movw	r24, r22
    2602:	8d 8b       	std	Y+21, r24	; 0x15
    2604:	9e 8b       	std	Y+22, r25	; 0x16
    2606:	af 8b       	std	Y+23, r26	; 0x17
    2608:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    260a:	6d 89       	ldd	r22, Y+21	; 0x15
    260c:	7e 89       	ldd	r23, Y+22	; 0x16
    260e:	8f 89       	ldd	r24, Y+23	; 0x17
    2610:	98 8d       	ldd	r25, Y+24	; 0x18
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	40 e8       	ldi	r20, 0x80	; 128
    2618:	5f e3       	ldi	r21, 0x3F	; 63
    261a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    261e:	88 23       	and	r24, r24
    2620:	2c f4       	brge	.+10     	; 0x262c <HLCD_WriteString4Bit+0xb0>
		__ticks = 1;
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	9c 8b       	std	Y+20, r25	; 0x14
    2628:	8b 8b       	std	Y+19, r24	; 0x13
    262a:	3f c0       	rjmp	.+126    	; 0x26aa <HLCD_WriteString4Bit+0x12e>
	else if (__tmp > 65535)
    262c:	6d 89       	ldd	r22, Y+21	; 0x15
    262e:	7e 89       	ldd	r23, Y+22	; 0x16
    2630:	8f 89       	ldd	r24, Y+23	; 0x17
    2632:	98 8d       	ldd	r25, Y+24	; 0x18
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	3f ef       	ldi	r19, 0xFF	; 255
    2638:	4f e7       	ldi	r20, 0x7F	; 127
    263a:	57 e4       	ldi	r21, 0x47	; 71
    263c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2640:	18 16       	cp	r1, r24
    2642:	4c f5       	brge	.+82     	; 0x2696 <HLCD_WriteString4Bit+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2644:	69 8d       	ldd	r22, Y+25	; 0x19
    2646:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2648:	8b 8d       	ldd	r24, Y+27	; 0x1b
    264a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	40 e2       	ldi	r20, 0x20	; 32
    2652:	51 e4       	ldi	r21, 0x41	; 65
    2654:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2658:	dc 01       	movw	r26, r24
    265a:	cb 01       	movw	r24, r22
    265c:	bc 01       	movw	r22, r24
    265e:	cd 01       	movw	r24, r26
    2660:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	9c 8b       	std	Y+20, r25	; 0x14
    266a:	8b 8b       	std	Y+19, r24	; 0x13
    266c:	0f c0       	rjmp	.+30     	; 0x268c <HLCD_WriteString4Bit+0x110>
    266e:	80 e9       	ldi	r24, 0x90	; 144
    2670:	91 e0       	ldi	r25, 0x01	; 1
    2672:	9a 8b       	std	Y+18, r25	; 0x12
    2674:	89 8b       	std	Y+17, r24	; 0x11
    2676:	89 89       	ldd	r24, Y+17	; 0x11
    2678:	9a 89       	ldd	r25, Y+18	; 0x12
    267a:	01 97       	sbiw	r24, 0x01	; 1
    267c:	f1 f7       	brne	.-4      	; 0x267a <HLCD_WriteString4Bit+0xfe>
    267e:	9a 8b       	std	Y+18, r25	; 0x12
    2680:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2682:	8b 89       	ldd	r24, Y+19	; 0x13
    2684:	9c 89       	ldd	r25, Y+20	; 0x14
    2686:	01 97       	sbiw	r24, 0x01	; 1
    2688:	9c 8b       	std	Y+20, r25	; 0x14
    268a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    268c:	8b 89       	ldd	r24, Y+19	; 0x13
    268e:	9c 89       	ldd	r25, Y+20	; 0x14
    2690:	00 97       	sbiw	r24, 0x00	; 0
    2692:	69 f7       	brne	.-38     	; 0x266e <HLCD_WriteString4Bit+0xf2>
    2694:	14 c0       	rjmp	.+40     	; 0x26be <HLCD_WriteString4Bit+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2696:	6d 89       	ldd	r22, Y+21	; 0x15
    2698:	7e 89       	ldd	r23, Y+22	; 0x16
    269a:	8f 89       	ldd	r24, Y+23	; 0x17
    269c:	98 8d       	ldd	r25, Y+24	; 0x18
    269e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	9c 8b       	std	Y+20, r25	; 0x14
    26a8:	8b 8b       	std	Y+19, r24	; 0x13
    26aa:	8b 89       	ldd	r24, Y+19	; 0x13
    26ac:	9c 89       	ldd	r25, Y+20	; 0x14
    26ae:	98 8b       	std	Y+16, r25	; 0x10
    26b0:	8f 87       	std	Y+15, r24	; 0x0f
    26b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    26b4:	98 89       	ldd	r25, Y+16	; 0x10
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	f1 f7       	brne	.-4      	; 0x26b6 <HLCD_WriteString4Bit+0x13a>
    26ba:	98 8b       	std	Y+16, r25	; 0x10
    26bc:	8f 87       	std	Y+15, r24	; 0x0f
	 	      _delay_ms(2);
	 	 	MDIO_SetPinValue(CONTROL_PORT, E, PinLow);
    26be:	81 e0       	ldi	r24, 0x01	; 1
    26c0:	63 e0       	ldi	r22, 0x03	; 3
    26c2:	40 e0       	ldi	r20, 0x00	; 0
    26c4:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <MDIO_SetPinValue>

	 	     // set low nibble value of the command

        MDIO_SetNibbleValue(HCLCD_PIN_START, DATA_PORT, ptr_u8String[loc_u8it]);
    26c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26ca:	28 2f       	mov	r18, r24
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26d0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26d2:	fc 01       	movw	r30, r24
    26d4:	e2 0f       	add	r30, r18
    26d6:	f3 1f       	adc	r31, r19
    26d8:	90 81       	ld	r25, Z
    26da:	84 e0       	ldi	r24, 0x04	; 4
    26dc:	60 e0       	ldi	r22, 0x00	; 0
    26de:	49 2f       	mov	r20, r25
    26e0:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <MDIO_SetNibbleValue>
	 	      //set falling edge
	 		MDIO_SetPinValue(CONTROL_PORT, E, PinHigh);
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	63 e0       	ldi	r22, 0x03	; 3
    26e8:	41 e0       	ldi	r20, 0x01	; 1
    26ea:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <MDIO_SetPinValue>
    26ee:	80 e0       	ldi	r24, 0x00	; 0
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	a0 e0       	ldi	r26, 0x00	; 0
    26f4:	b0 e4       	ldi	r27, 0x40	; 64
    26f6:	8b 87       	std	Y+11, r24	; 0x0b
    26f8:	9c 87       	std	Y+12, r25	; 0x0c
    26fa:	ad 87       	std	Y+13, r26	; 0x0d
    26fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2700:	7c 85       	ldd	r23, Y+12	; 0x0c
    2702:	8d 85       	ldd	r24, Y+13	; 0x0d
    2704:	9e 85       	ldd	r25, Y+14	; 0x0e
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	4a e7       	ldi	r20, 0x7A	; 122
    270c:	55 e4       	ldi	r21, 0x45	; 69
    270e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2712:	dc 01       	movw	r26, r24
    2714:	cb 01       	movw	r24, r22
    2716:	8f 83       	std	Y+7, r24	; 0x07
    2718:	98 87       	std	Y+8, r25	; 0x08
    271a:	a9 87       	std	Y+9, r26	; 0x09
    271c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    271e:	6f 81       	ldd	r22, Y+7	; 0x07
    2720:	78 85       	ldd	r23, Y+8	; 0x08
    2722:	89 85       	ldd	r24, Y+9	; 0x09
    2724:	9a 85       	ldd	r25, Y+10	; 0x0a
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	40 e8       	ldi	r20, 0x80	; 128
    272c:	5f e3       	ldi	r21, 0x3F	; 63
    272e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2732:	88 23       	and	r24, r24
    2734:	2c f4       	brge	.+10     	; 0x2740 <HLCD_WriteString4Bit+0x1c4>
		__ticks = 1;
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	9e 83       	std	Y+6, r25	; 0x06
    273c:	8d 83       	std	Y+5, r24	; 0x05
    273e:	3f c0       	rjmp	.+126    	; 0x27be <HLCD_WriteString4Bit+0x242>
	else if (__tmp > 65535)
    2740:	6f 81       	ldd	r22, Y+7	; 0x07
    2742:	78 85       	ldd	r23, Y+8	; 0x08
    2744:	89 85       	ldd	r24, Y+9	; 0x09
    2746:	9a 85       	ldd	r25, Y+10	; 0x0a
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	3f ef       	ldi	r19, 0xFF	; 255
    274c:	4f e7       	ldi	r20, 0x7F	; 127
    274e:	57 e4       	ldi	r21, 0x47	; 71
    2750:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2754:	18 16       	cp	r1, r24
    2756:	4c f5       	brge	.+82     	; 0x27aa <HLCD_WriteString4Bit+0x22e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2758:	6b 85       	ldd	r22, Y+11	; 0x0b
    275a:	7c 85       	ldd	r23, Y+12	; 0x0c
    275c:	8d 85       	ldd	r24, Y+13	; 0x0d
    275e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	40 e2       	ldi	r20, 0x20	; 32
    2766:	51 e4       	ldi	r21, 0x41	; 65
    2768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	bc 01       	movw	r22, r24
    2772:	cd 01       	movw	r24, r26
    2774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	9e 83       	std	Y+6, r25	; 0x06
    277e:	8d 83       	std	Y+5, r24	; 0x05
    2780:	0f c0       	rjmp	.+30     	; 0x27a0 <HLCD_WriteString4Bit+0x224>
    2782:	80 e9       	ldi	r24, 0x90	; 144
    2784:	91 e0       	ldi	r25, 0x01	; 1
    2786:	9c 83       	std	Y+4, r25	; 0x04
    2788:	8b 83       	std	Y+3, r24	; 0x03
    278a:	8b 81       	ldd	r24, Y+3	; 0x03
    278c:	9c 81       	ldd	r25, Y+4	; 0x04
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	f1 f7       	brne	.-4      	; 0x278e <HLCD_WriteString4Bit+0x212>
    2792:	9c 83       	std	Y+4, r25	; 0x04
    2794:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2796:	8d 81       	ldd	r24, Y+5	; 0x05
    2798:	9e 81       	ldd	r25, Y+6	; 0x06
    279a:	01 97       	sbiw	r24, 0x01	; 1
    279c:	9e 83       	std	Y+6, r25	; 0x06
    279e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a0:	8d 81       	ldd	r24, Y+5	; 0x05
    27a2:	9e 81       	ldd	r25, Y+6	; 0x06
    27a4:	00 97       	sbiw	r24, 0x00	; 0
    27a6:	69 f7       	brne	.-38     	; 0x2782 <HLCD_WriteString4Bit+0x206>
    27a8:	14 c0       	rjmp	.+40     	; 0x27d2 <HLCD_WriteString4Bit+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27aa:	6f 81       	ldd	r22, Y+7	; 0x07
    27ac:	78 85       	ldd	r23, Y+8	; 0x08
    27ae:	89 85       	ldd	r24, Y+9	; 0x09
    27b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b6:	dc 01       	movw	r26, r24
    27b8:	cb 01       	movw	r24, r22
    27ba:	9e 83       	std	Y+6, r25	; 0x06
    27bc:	8d 83       	std	Y+5, r24	; 0x05
    27be:	8d 81       	ldd	r24, Y+5	; 0x05
    27c0:	9e 81       	ldd	r25, Y+6	; 0x06
    27c2:	9a 83       	std	Y+2, r25	; 0x02
    27c4:	89 83       	std	Y+1, r24	; 0x01
    27c6:	89 81       	ldd	r24, Y+1	; 0x01
    27c8:	9a 81       	ldd	r25, Y+2	; 0x02
    27ca:	01 97       	sbiw	r24, 0x01	; 1
    27cc:	f1 f7       	brne	.-4      	; 0x27ca <HLCD_WriteString4Bit+0x24e>
    27ce:	9a 83       	std	Y+2, r25	; 0x02
    27d0:	89 83       	std	Y+1, r24	; 0x01
	 	      _delay_ms(2);
	 	 	MDIO_SetPinValue(CONTROL_PORT, E, PinLow);
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	63 e0       	ldi	r22, 0x03	; 3
    27d6:	40 e0       	ldi	r20, 0x00	; 0
    27d8:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <MDIO_SetPinValue>
	//Wrong Line Chosen
}
}
void HLCD_WriteString4Bit (u8 *ptr_u8String)
{ u8 loc_u8it =0;
 for (loc_u8it=0;ptr_u8String[loc_u8it]!=Null;loc_u8it++)
    27dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27de:	8f 5f       	subi	r24, 0xFF	; 255
    27e0:	8d 8f       	std	Y+29, r24	; 0x1d
    27e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27e4:	28 2f       	mov	r18, r24
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27ea:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27ec:	fc 01       	movw	r30, r24
    27ee:	e2 0f       	add	r30, r18
    27f0:	f3 1f       	adc	r31, r19
    27f2:	80 81       	ld	r24, Z
    27f4:	88 23       	and	r24, r24
    27f6:	09 f0       	breq	.+2      	; 0x27fa <HLCD_WriteString4Bit+0x27e>
    27f8:	d0 ce       	rjmp	.-608    	; 0x259a <HLCD_WriteString4Bit+0x1e>
	 	      _delay_ms(2);
	 	 	MDIO_SetPinValue(CONTROL_PORT, E, PinLow);

 }

	}
    27fa:	6f 96       	adiw	r28, 0x1f	; 31
    27fc:	0f b6       	in	r0, 0x3f	; 63
    27fe:	f8 94       	cli
    2800:	de bf       	out	0x3e, r29	; 62
    2802:	0f be       	out	0x3f, r0	; 63
    2804:	cd bf       	out	0x3d, r28	; 61
    2806:	cf 91       	pop	r28
    2808:	df 91       	pop	r29
    280a:	08 95       	ret

0000280c <HCLCD_WriteNumber>:
void HCLCD_WriteNumber(u32 Copy_u32Number)
{
    280c:	0f 93       	push	r16
    280e:	1f 93       	push	r17
    2810:	df 93       	push	r29
    2812:	cf 93       	push	r28
    2814:	cd b7       	in	r28, 0x3d	; 61
    2816:	de b7       	in	r29, 0x3e	; 62
    2818:	60 97       	sbiw	r28, 0x10	; 16
    281a:	0f b6       	in	r0, 0x3f	; 63
    281c:	f8 94       	cli
    281e:	de bf       	out	0x3e, r29	; 62
    2820:	0f be       	out	0x3f, r0	; 63
    2822:	cd bf       	out	0x3d, r28	; 61
    2824:	6d 87       	std	Y+13, r22	; 0x0d
    2826:	7e 87       	std	Y+14, r23	; 0x0e
    2828:	8f 87       	std	Y+15, r24	; 0x0f
    282a:	98 8b       	std	Y+16, r25	; 0x10
	which is 10 digits
	 */
	u8 Loc_u8Arr_Digits[10];

	/*Define a Local Counter to traverse the array*/
	u8 Loc_Counter=0;
    282c:	1a 82       	std	Y+2, r1	; 0x02

	/*Check on the upcoming number*/
	if(Copy_u32Number>0)
    282e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2830:	9e 85       	ldd	r25, Y+14	; 0x0e
    2832:	af 85       	ldd	r26, Y+15	; 0x0f
    2834:	b8 89       	ldd	r27, Y+16	; 0x10
    2836:	00 97       	sbiw	r24, 0x00	; 0
    2838:	a1 05       	cpc	r26, r1
    283a:	b1 05       	cpc	r27, r1
    283c:	09 f4       	brne	.+2      	; 0x2840 <HCLCD_WriteNumber+0x34>
    283e:	4f c0       	rjmp	.+158    	; 0x28de <HCLCD_WriteNumber+0xd2>
    2840:	2d c0       	rjmp	.+90     	; 0x289c <HCLCD_WriteNumber+0x90>
		/*Parsing the number into the array*/
		while(Copy_u32Number!=0) //Exit Condition means number is done parsing
		{
			//Extract the Least Significant Digit and Put it in the
			//Array
			Loc_u8Arr_Digits[Loc_Counter]=Copy_u32Number%10 ;
    2842:	8a 81       	ldd	r24, Y+2	; 0x02
    2844:	08 2f       	mov	r16, r24
    2846:	10 e0       	ldi	r17, 0x00	; 0
    2848:	8d 85       	ldd	r24, Y+13	; 0x0d
    284a:	9e 85       	ldd	r25, Y+14	; 0x0e
    284c:	af 85       	ldd	r26, Y+15	; 0x0f
    284e:	b8 89       	ldd	r27, Y+16	; 0x10
    2850:	2a e0       	ldi	r18, 0x0A	; 10
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	40 e0       	ldi	r20, 0x00	; 0
    2856:	50 e0       	ldi	r21, 0x00	; 0
    2858:	bc 01       	movw	r22, r24
    285a:	cd 01       	movw	r24, r26
    285c:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <__udivmodsi4>
    2860:	dc 01       	movw	r26, r24
    2862:	cb 01       	movw	r24, r22
    2864:	28 2f       	mov	r18, r24
    2866:	ce 01       	movw	r24, r28
    2868:	03 96       	adiw	r24, 0x03	; 3
    286a:	fc 01       	movw	r30, r24
    286c:	e0 0f       	add	r30, r16
    286e:	f1 1f       	adc	r31, r17
    2870:	20 83       	st	Z, r18

			//Removing the Extracted digit from the number
			Copy_u32Number=Copy_u32Number/10 ;
    2872:	8d 85       	ldd	r24, Y+13	; 0x0d
    2874:	9e 85       	ldd	r25, Y+14	; 0x0e
    2876:	af 85       	ldd	r26, Y+15	; 0x0f
    2878:	b8 89       	ldd	r27, Y+16	; 0x10
    287a:	2a e0       	ldi	r18, 0x0A	; 10
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	40 e0       	ldi	r20, 0x00	; 0
    2880:	50 e0       	ldi	r21, 0x00	; 0
    2882:	bc 01       	movw	r22, r24
    2884:	cd 01       	movw	r24, r26
    2886:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <__udivmodsi4>
    288a:	da 01       	movw	r26, r20
    288c:	c9 01       	movw	r24, r18
    288e:	8d 87       	std	Y+13, r24	; 0x0d
    2890:	9e 87       	std	Y+14, r25	; 0x0e
    2892:	af 87       	std	Y+15, r26	; 0x0f
    2894:	b8 8b       	std	Y+16, r27	; 0x10

			//Increasing the counter so the digits are saved in next array element
			Loc_Counter++;
    2896:	8a 81       	ldd	r24, Y+2	; 0x02
    2898:	8f 5f       	subi	r24, 0xFF	; 255
    289a:	8a 83       	std	Y+2, r24	; 0x02

	/*Check on the upcoming number*/
	if(Copy_u32Number>0)
	{
		/*Parsing the number into the array*/
		while(Copy_u32Number!=0) //Exit Condition means number is done parsing
    289c:	8d 85       	ldd	r24, Y+13	; 0x0d
    289e:	9e 85       	ldd	r25, Y+14	; 0x0e
    28a0:	af 85       	ldd	r26, Y+15	; 0x0f
    28a2:	b8 89       	ldd	r27, Y+16	; 0x10
    28a4:	00 97       	sbiw	r24, 0x00	; 0
    28a6:	a1 05       	cpc	r26, r1
    28a8:	b1 05       	cpc	r27, r1
    28aa:	59 f6       	brne	.-106    	; 0x2842 <HCLCD_WriteNumber+0x36>
		//in the array but backwards

		//Take Care Loc_forCounter is signed
		//because we are decrementing it
		s8 Loc_forCounter;
		for(Loc_forCounter=Loc_Counter-1;Loc_forCounter>=0;Loc_forCounter--)
    28ac:	8a 81       	ldd	r24, Y+2	; 0x02
    28ae:	81 50       	subi	r24, 0x01	; 1
    28b0:	89 83       	std	Y+1, r24	; 0x01
    28b2:	11 c0       	rjmp	.+34     	; 0x28d6 <HCLCD_WriteNumber+0xca>
		{
			//Write the digits to the screen in their right order
			//Notice the addition of the number to the ASCII Code
			//of the number 0 because our Function takes ASCII of character
			//to Print on the LCD
			HCLCD_WriteChar4Bit(Loc_u8Arr_Digits[Loc_forCounter]+'0');
    28b4:	89 81       	ldd	r24, Y+1	; 0x01
    28b6:	28 2f       	mov	r18, r24
    28b8:	33 27       	eor	r19, r19
    28ba:	27 fd       	sbrc	r18, 7
    28bc:	30 95       	com	r19
    28be:	ce 01       	movw	r24, r28
    28c0:	03 96       	adiw	r24, 0x03	; 3
    28c2:	fc 01       	movw	r30, r24
    28c4:	e2 0f       	add	r30, r18
    28c6:	f3 1f       	adc	r31, r19
    28c8:	80 81       	ld	r24, Z
    28ca:	80 5d       	subi	r24, 0xD0	; 208
    28cc:	0e 94 79 11 	call	0x22f2	; 0x22f2 <HCLCD_WriteChar4Bit>
		//in the array but backwards

		//Take Care Loc_forCounter is signed
		//because we are decrementing it
		s8 Loc_forCounter;
		for(Loc_forCounter=Loc_Counter-1;Loc_forCounter>=0;Loc_forCounter--)
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	81 50       	subi	r24, 0x01	; 1
    28d4:	89 83       	std	Y+1, r24	; 0x01
    28d6:	89 81       	ldd	r24, Y+1	; 0x01
    28d8:	88 23       	and	r24, r24
    28da:	64 f7       	brge	.-40     	; 0x28b4 <HCLCD_WriteNumber+0xa8>
    28dc:	03 c0       	rjmp	.+6      	; 0x28e4 <HCLCD_WriteNumber+0xd8>

	}
	else
	{
		/*if the number is zero so we have to send ASCII Code of Zero*/
		HCLCD_WriteChar4Bit('0');
    28de:	80 e3       	ldi	r24, 0x30	; 48
    28e0:	0e 94 79 11 	call	0x22f2	; 0x22f2 <HCLCD_WriteChar4Bit>
	}

}
    28e4:	60 96       	adiw	r28, 0x10	; 16
    28e6:	0f b6       	in	r0, 0x3f	; 63
    28e8:	f8 94       	cli
    28ea:	de bf       	out	0x3e, r29	; 62
    28ec:	0f be       	out	0x3f, r0	; 63
    28ee:	cd bf       	out	0x3d, r28	; 61
    28f0:	cf 91       	pop	r28
    28f2:	df 91       	pop	r29
    28f4:	1f 91       	pop	r17
    28f6:	0f 91       	pop	r16
    28f8:	08 95       	ret

000028fa <ISR_TIMERSTART>:
f32 static GLOBAL_f32Freq;
f32 static GLOBAL_F32DUTY;
u8  static x;
u16 static y;
void ISR_TIMERSTART(void)
{
    28fa:	df 93       	push	r29
    28fc:	cf 93       	push	r28
    28fe:	cd b7       	in	r28, 0x3d	; 61
    2900:	de b7       	in	r29, 0x3e	; 62
if(GLOBAL_U8COUNTER==0){
    2902:	80 91 86 01 	lds	r24, 0x0186
    2906:	88 23       	and	r24, r24
    2908:	41 f4       	brne	.+16     	; 0x291a <ISR_TIMERSTART+0x20>
	MTIMER0_Init();
    290a:	0e 94 75 07 	call	0xeea	; 0xeea <MTIMER0_Init>
	GLOBAL_U8COUNTER++;
    290e:	80 91 86 01 	lds	r24, 0x0186
    2912:	8f 5f       	subi	r24, 0xFF	; 255
    2914:	80 93 86 01 	sts	0x0186, r24
    2918:	78 c0       	rjmp	.+240    	; 0x2a0a <ISR_TIMERSTART+0x110>
}else if(GLOBAL_U8COUNTER==1)
    291a:	80 91 86 01 	lds	r24, 0x0186
    291e:	81 30       	cpi	r24, 0x01	; 1
    2920:	b1 f5       	brne	.+108    	; 0x298e <ISR_TIMERSTART+0x94>
{

 y=TCNT0+(LOCAL_U8NOOVERFLOW*256);//TCNT0(no.ofticks)+km maraoverflow*256
    2922:	e2 e5       	ldi	r30, 0x52	; 82
    2924:	f0 e0       	ldi	r31, 0x00	; 0
    2926:	80 81       	ld	r24, Z
    2928:	28 2f       	mov	r18, r24
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	80 91 87 01 	lds	r24, 0x0187
    2930:	88 2f       	mov	r24, r24
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	98 2f       	mov	r25, r24
    2936:	88 27       	eor	r24, r24
    2938:	82 0f       	add	r24, r18
    293a:	93 1f       	adc	r25, r19
    293c:	90 93 92 01 	sts	0x0192, r25
    2940:	80 93 91 01 	sts	0x0191, r24
GLOBALU16_ONTIME=(y*(1/(1000000.0/64.0)));//Y*TICKTIME
    2944:	80 91 91 01 	lds	r24, 0x0191
    2948:	90 91 92 01 	lds	r25, 0x0192
    294c:	cc 01       	movw	r24, r24
    294e:	a0 e0       	ldi	r26, 0x00	; 0
    2950:	b0 e0       	ldi	r27, 0x00	; 0
    2952:	bc 01       	movw	r22, r24
    2954:	cd 01       	movw	r24, r26
    2956:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	bc 01       	movw	r22, r24
    2960:	cd 01       	movw	r24, r26
    2962:	2d eb       	ldi	r18, 0xBD	; 189
    2964:	37 e3       	ldi	r19, 0x37	; 55
    2966:	46 e8       	ldi	r20, 0x86	; 134
    2968:	58 e3       	ldi	r21, 0x38	; 56
    296a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    296e:	dc 01       	movw	r26, r24
    2970:	cb 01       	movw	r24, r22
    2972:	80 93 7e 01 	sts	0x017E, r24
    2976:	90 93 7f 01 	sts	0x017F, r25
    297a:	a0 93 80 01 	sts	0x0180, r26
    297e:	b0 93 81 01 	sts	0x0181, r27
GLOBAL_U8COUNTER++;
    2982:	80 91 86 01 	lds	r24, 0x0186
    2986:	8f 5f       	subi	r24, 0xFF	; 255
    2988:	80 93 86 01 	sts	0x0186, r24
    298c:	3e c0       	rjmp	.+124    	; 0x2a0a <ISR_TIMERSTART+0x110>
}else if (GLOBAL_U8COUNTER==2)
    298e:	80 91 86 01 	lds	r24, 0x0186
    2992:	82 30       	cpi	r24, 0x02	; 2
    2994:	d1 f5       	brne	.+116    	; 0x2a0a <ISR_TIMERSTART+0x110>
{
  x=TCNT0+(LOCAL_U8NOOVERFLOW*255);
    2996:	e2 e5       	ldi	r30, 0x52	; 82
    2998:	f0 e0       	ldi	r31, 0x00	; 0
    299a:	60 81       	ld	r22, Z
    299c:	80 91 87 01 	lds	r24, 0x0187
    29a0:	48 2f       	mov	r20, r24
    29a2:	50 e0       	ldi	r21, 0x00	; 0
    29a4:	ca 01       	movw	r24, r20
    29a6:	9c 01       	movw	r18, r24
    29a8:	22 0f       	add	r18, r18
    29aa:	33 1f       	adc	r19, r19
    29ac:	c9 01       	movw	r24, r18
    29ae:	96 95       	lsr	r25
    29b0:	98 2f       	mov	r25, r24
    29b2:	88 27       	eor	r24, r24
    29b4:	97 95       	ror	r25
    29b6:	87 95       	ror	r24
    29b8:	82 1b       	sub	r24, r18
    29ba:	93 0b       	sbc	r25, r19
    29bc:	84 0f       	add	r24, r20
    29be:	95 1f       	adc	r25, r21
    29c0:	86 0f       	add	r24, r22
    29c2:	80 93 90 01 	sts	0x0190, r24
 GLOBALU16_TOTALTIME=x*(1/(1000000.0/64.0));
    29c6:	80 91 90 01 	lds	r24, 0x0190
    29ca:	88 2f       	mov	r24, r24
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	aa 27       	eor	r26, r26
    29d0:	97 fd       	sbrc	r25, 7
    29d2:	a0 95       	com	r26
    29d4:	ba 2f       	mov	r27, r26
    29d6:	bc 01       	movw	r22, r24
    29d8:	cd 01       	movw	r24, r26
    29da:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    29de:	dc 01       	movw	r26, r24
    29e0:	cb 01       	movw	r24, r22
    29e2:	bc 01       	movw	r22, r24
    29e4:	cd 01       	movw	r24, r26
    29e6:	2d eb       	ldi	r18, 0xBD	; 189
    29e8:	37 e3       	ldi	r19, 0x37	; 55
    29ea:	46 e8       	ldi	r20, 0x86	; 134
    29ec:	58 e3       	ldi	r21, 0x38	; 56
    29ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f2:	dc 01       	movw	r26, r24
    29f4:	cb 01       	movw	r24, r22
    29f6:	80 93 82 01 	sts	0x0182, r24
    29fa:	90 93 83 01 	sts	0x0183, r25
    29fe:	a0 93 84 01 	sts	0x0184, r26
    2a02:	b0 93 85 01 	sts	0x0185, r27
 GLOBAL_U8COUNTER=0;
    2a06:	10 92 86 01 	sts	0x0186, r1
}
}
    2a0a:	cf 91       	pop	r28
    2a0c:	df 91       	pop	r29
    2a0e:	08 95       	ret

00002a10 <ISR_OVERFLOW>:
void ISR_OVERFLOW(void)
{
    2a10:	df 93       	push	r29
    2a12:	cf 93       	push	r28
    2a14:	cd b7       	in	r28, 0x3d	; 61
    2a16:	de b7       	in	r29, 0x3e	; 62
	LOCAL_U8NOOVERFLOW++;
    2a18:	80 91 87 01 	lds	r24, 0x0187
    2a1c:	8f 5f       	subi	r24, 0xFF	; 255
    2a1e:	80 93 87 01 	sts	0x0187, r24
	}
    2a22:	cf 91       	pop	r28
    2a24:	df 91       	pop	r29
    2a26:	08 95       	ret

00002a28 <main>:
int main()
{
    2a28:	df 93       	push	r29
    2a2a:	cf 93       	push	r28
    2a2c:	0f 92       	push	r0
    2a2e:	cd b7       	in	r28, 0x3d	; 61
    2a30:	de b7       	in	r29, 0x3e	; 62
	GLOBAL_F32DUTY=GLOBALU16_ONTIME/GLOBALU16_TOTALTIME;
    2a32:	80 91 7e 01 	lds	r24, 0x017E
    2a36:	90 91 7f 01 	lds	r25, 0x017F
    2a3a:	a0 91 80 01 	lds	r26, 0x0180
    2a3e:	b0 91 81 01 	lds	r27, 0x0181
    2a42:	20 91 82 01 	lds	r18, 0x0182
    2a46:	30 91 83 01 	lds	r19, 0x0183
    2a4a:	40 91 84 01 	lds	r20, 0x0184
    2a4e:	50 91 85 01 	lds	r21, 0x0185
    2a52:	bc 01       	movw	r22, r24
    2a54:	cd 01       	movw	r24, r26
    2a56:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	80 93 8c 01 	sts	0x018C, r24
    2a62:	90 93 8d 01 	sts	0x018D, r25
    2a66:	a0 93 8e 01 	sts	0x018E, r26
    2a6a:	b0 93 8f 01 	sts	0x018F, r27
	 GLOBAL_f32Freq=1/GLOBALU16_TOTALTIME;
    2a6e:	20 91 82 01 	lds	r18, 0x0182
    2a72:	30 91 83 01 	lds	r19, 0x0183
    2a76:	40 91 84 01 	lds	r20, 0x0184
    2a7a:	50 91 85 01 	lds	r21, 0x0185
    2a7e:	60 e0       	ldi	r22, 0x00	; 0
    2a80:	70 e0       	ldi	r23, 0x00	; 0
    2a82:	80 e8       	ldi	r24, 0x80	; 128
    2a84:	9f e3       	ldi	r25, 0x3F	; 63
    2a86:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	80 93 88 01 	sts	0x0188, r24
    2a92:	90 93 89 01 	sts	0x0189, r25
    2a96:	a0 93 8a 01 	sts	0x018A, r26
    2a9a:	b0 93 8b 01 	sts	0x018B, r27
	 GLOBAL_F32DUTY=GLOBAL_F32DUTY*100;
    2a9e:	80 91 8c 01 	lds	r24, 0x018C
    2aa2:	90 91 8d 01 	lds	r25, 0x018D
    2aa6:	a0 91 8e 01 	lds	r26, 0x018E
    2aaa:	b0 91 8f 01 	lds	r27, 0x018F
    2aae:	bc 01       	movw	r22, r24
    2ab0:	cd 01       	movw	r24, r26
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	48 ec       	ldi	r20, 0xC8	; 200
    2ab8:	52 e4       	ldi	r21, 0x42	; 66
    2aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	80 93 8c 01 	sts	0x018C, r24
    2ac6:	90 93 8d 01 	sts	0x018D, r25
    2aca:	a0 93 8e 01 	sts	0x018E, r26
    2ace:	b0 93 8f 01 	sts	0x018F, r27
	MTIMER0_OVERFLOW_CALLBACK(ISR_OVERFLOW);
    2ad2:	88 e0       	ldi	r24, 0x08	; 8
    2ad4:	95 e1       	ldi	r25, 0x15	; 21
    2ad6:	0e 94 c9 07 	call	0xf92	; 0xf92 <MTIMER0_OVERFLOW_CALLBACK>
	INTERRUPT_Set0CallBack(ISR_TIMERSTART);
    2ada:	8d e7       	ldi	r24, 0x7D	; 125
    2adc:	94 e1       	ldi	r25, 0x14	; 20
    2ade:	0e 94 df 08 	call	0x11be	; 0x11be <INTERRUPT_Set0CallBack>
	HCLCD_Init4Bit();
    2ae2:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <HCLCD_Init4Bit>
	HLCD_WriteString4Bit("freq");
    2ae6:	80 e6       	ldi	r24, 0x60	; 96
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	0e 94 be 12 	call	0x257c	; 0x257c <HLCD_WriteString4Bit>
	HCLCD_WriteNumber(GLOBAL_f32Freq);
    2aee:	80 91 88 01 	lds	r24, 0x0188
    2af2:	90 91 89 01 	lds	r25, 0x0189
    2af6:	a0 91 8a 01 	lds	r26, 0x018A
    2afa:	b0 91 8b 01 	lds	r27, 0x018B
    2afe:	bc 01       	movw	r22, r24
    2b00:	cd 01       	movw	r24, r26
    2b02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b06:	dc 01       	movw	r26, r24
    2b08:	cb 01       	movw	r24, r22
    2b0a:	bc 01       	movw	r22, r24
    2b0c:	cd 01       	movw	r24, r26
    2b0e:	0e 94 06 14 	call	0x280c	; 0x280c <HCLCD_WriteNumber>
	//HCLCD_WriteNumber(100);
	HLCD_WriteString4Bit("Duty");
    2b12:	85 e6       	ldi	r24, 0x65	; 101
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	0e 94 be 12 	call	0x257c	; 0x257c <HLCD_WriteString4Bit>
	//HCLCD_WriteNumber(50);
	HCLCD_WriteNumber(GLOBAL_F32DUTY);
    2b1a:	80 91 8c 01 	lds	r24, 0x018C
    2b1e:	90 91 8d 01 	lds	r25, 0x018D
    2b22:	a0 91 8e 01 	lds	r26, 0x018E
    2b26:	b0 91 8f 01 	lds	r27, 0x018F
    2b2a:	bc 01       	movw	r22, r24
    2b2c:	cd 01       	movw	r24, r26
    2b2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	bc 01       	movw	r22, r24
    2b38:	cd 01       	movw	r24, r26
    2b3a:	0e 94 06 14 	call	0x280c	; 0x280c <HCLCD_WriteNumber>
	HLCD_WriteString4Bit("%");
    2b3e:	8a e6       	ldi	r24, 0x6A	; 106
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	0e 94 be 12 	call	0x257c	; 0x257c <HLCD_WriteString4Bit>
	HCLCD_SetCursorPosition( HCLCD_LINE_1 , 1);
    2b46:	81 e0       	ldi	r24, 0x01	; 1
    2b48:	61 e0       	ldi	r22, 0x01	; 1
    2b4a:	0e 94 9d 12 	call	0x253a	; 0x253a <HCLCD_SetCursorPosition>
	u8 LOC_u8Counter=0;
    2b4e:	19 82       	std	Y+1, r1	; 0x01
	for(LOC_u8Counter=0;LOC_u8Counter<4;LOC_u8Counter++)
    2b50:	19 82       	std	Y+1, r1	; 0x01
    2b52:	13 c0       	rjmp	.+38     	; 0x2b7a <main+0x152>
	{
	HLCD_WriteString4Bit("_");
    2b54:	8c e6       	ldi	r24, 0x6C	; 108
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	0e 94 be 12 	call	0x257c	; 0x257c <HLCD_WriteString4Bit>
	HLCD_WriteString4Bit("|");
    2b5c:	8e e6       	ldi	r24, 0x6E	; 110
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	0e 94 be 12 	call	0x257c	; 0x257c <HLCD_WriteString4Bit>
	HLCD_WriteString4Bit("-");
    2b64:	80 e7       	ldi	r24, 0x70	; 112
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	0e 94 be 12 	call	0x257c	; 0x257c <HLCD_WriteString4Bit>
	HLCD_WriteString4Bit("|");
    2b6c:	8e e6       	ldi	r24, 0x6E	; 110
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	0e 94 be 12 	call	0x257c	; 0x257c <HLCD_WriteString4Bit>
	//HCLCD_WriteNumber(50);
	HCLCD_WriteNumber(GLOBAL_F32DUTY);
	HLCD_WriteString4Bit("%");
	HCLCD_SetCursorPosition( HCLCD_LINE_1 , 1);
	u8 LOC_u8Counter=0;
	for(LOC_u8Counter=0;LOC_u8Counter<4;LOC_u8Counter++)
    2b74:	89 81       	ldd	r24, Y+1	; 0x01
    2b76:	8f 5f       	subi	r24, 0xFF	; 255
    2b78:	89 83       	std	Y+1, r24	; 0x01
    2b7a:	89 81       	ldd	r24, Y+1	; 0x01
    2b7c:	84 30       	cpi	r24, 0x04	; 4
    2b7e:	50 f3       	brcs	.-44     	; 0x2b54 <main+0x12c>
	HLCD_WriteString4Bit("_");
	HLCD_WriteString4Bit("|");
	HLCD_WriteString4Bit("-");
	HLCD_WriteString4Bit("|");
	}
	return 0;
    2b80:	80 e0       	ldi	r24, 0x00	; 0
    2b82:	90 e0       	ldi	r25, 0x00	; 0
}
    2b84:	0f 90       	pop	r0
    2b86:	cf 91       	pop	r28
    2b88:	df 91       	pop	r29
    2b8a:	08 95       	ret

00002b8c <__udivmodsi4>:
    2b8c:	a1 e2       	ldi	r26, 0x21	; 33
    2b8e:	1a 2e       	mov	r1, r26
    2b90:	aa 1b       	sub	r26, r26
    2b92:	bb 1b       	sub	r27, r27
    2b94:	fd 01       	movw	r30, r26
    2b96:	0d c0       	rjmp	.+26     	; 0x2bb2 <__udivmodsi4_ep>

00002b98 <__udivmodsi4_loop>:
    2b98:	aa 1f       	adc	r26, r26
    2b9a:	bb 1f       	adc	r27, r27
    2b9c:	ee 1f       	adc	r30, r30
    2b9e:	ff 1f       	adc	r31, r31
    2ba0:	a2 17       	cp	r26, r18
    2ba2:	b3 07       	cpc	r27, r19
    2ba4:	e4 07       	cpc	r30, r20
    2ba6:	f5 07       	cpc	r31, r21
    2ba8:	20 f0       	brcs	.+8      	; 0x2bb2 <__udivmodsi4_ep>
    2baa:	a2 1b       	sub	r26, r18
    2bac:	b3 0b       	sbc	r27, r19
    2bae:	e4 0b       	sbc	r30, r20
    2bb0:	f5 0b       	sbc	r31, r21

00002bb2 <__udivmodsi4_ep>:
    2bb2:	66 1f       	adc	r22, r22
    2bb4:	77 1f       	adc	r23, r23
    2bb6:	88 1f       	adc	r24, r24
    2bb8:	99 1f       	adc	r25, r25
    2bba:	1a 94       	dec	r1
    2bbc:	69 f7       	brne	.-38     	; 0x2b98 <__udivmodsi4_loop>
    2bbe:	60 95       	com	r22
    2bc0:	70 95       	com	r23
    2bc2:	80 95       	com	r24
    2bc4:	90 95       	com	r25
    2bc6:	9b 01       	movw	r18, r22
    2bc8:	ac 01       	movw	r20, r24
    2bca:	bd 01       	movw	r22, r26
    2bcc:	cf 01       	movw	r24, r30
    2bce:	08 95       	ret

00002bd0 <__prologue_saves__>:
    2bd0:	2f 92       	push	r2
    2bd2:	3f 92       	push	r3
    2bd4:	4f 92       	push	r4
    2bd6:	5f 92       	push	r5
    2bd8:	6f 92       	push	r6
    2bda:	7f 92       	push	r7
    2bdc:	8f 92       	push	r8
    2bde:	9f 92       	push	r9
    2be0:	af 92       	push	r10
    2be2:	bf 92       	push	r11
    2be4:	cf 92       	push	r12
    2be6:	df 92       	push	r13
    2be8:	ef 92       	push	r14
    2bea:	ff 92       	push	r15
    2bec:	0f 93       	push	r16
    2bee:	1f 93       	push	r17
    2bf0:	cf 93       	push	r28
    2bf2:	df 93       	push	r29
    2bf4:	cd b7       	in	r28, 0x3d	; 61
    2bf6:	de b7       	in	r29, 0x3e	; 62
    2bf8:	ca 1b       	sub	r28, r26
    2bfa:	db 0b       	sbc	r29, r27
    2bfc:	0f b6       	in	r0, 0x3f	; 63
    2bfe:	f8 94       	cli
    2c00:	de bf       	out	0x3e, r29	; 62
    2c02:	0f be       	out	0x3f, r0	; 63
    2c04:	cd bf       	out	0x3d, r28	; 61
    2c06:	09 94       	ijmp

00002c08 <__epilogue_restores__>:
    2c08:	2a 88       	ldd	r2, Y+18	; 0x12
    2c0a:	39 88       	ldd	r3, Y+17	; 0x11
    2c0c:	48 88       	ldd	r4, Y+16	; 0x10
    2c0e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c10:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c12:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c14:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c16:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c18:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c1a:	b9 84       	ldd	r11, Y+9	; 0x09
    2c1c:	c8 84       	ldd	r12, Y+8	; 0x08
    2c1e:	df 80       	ldd	r13, Y+7	; 0x07
    2c20:	ee 80       	ldd	r14, Y+6	; 0x06
    2c22:	fd 80       	ldd	r15, Y+5	; 0x05
    2c24:	0c 81       	ldd	r16, Y+4	; 0x04
    2c26:	1b 81       	ldd	r17, Y+3	; 0x03
    2c28:	aa 81       	ldd	r26, Y+2	; 0x02
    2c2a:	b9 81       	ldd	r27, Y+1	; 0x01
    2c2c:	ce 0f       	add	r28, r30
    2c2e:	d1 1d       	adc	r29, r1
    2c30:	0f b6       	in	r0, 0x3f	; 63
    2c32:	f8 94       	cli
    2c34:	de bf       	out	0x3e, r29	; 62
    2c36:	0f be       	out	0x3f, r0	; 63
    2c38:	cd bf       	out	0x3d, r28	; 61
    2c3a:	ed 01       	movw	r28, r26
    2c3c:	08 95       	ret

00002c3e <_exit>:
    2c3e:	f8 94       	cli

00002c40 <__stop_program>:
    2c40:	ff cf       	rjmp	.-2      	; 0x2c40 <__stop_program>
